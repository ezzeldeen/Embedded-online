
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002052  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00002052  000020c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000013e0  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a6c  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d1  00000000  00000000  000041bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002010  00000000  00000000  0000438d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  0000639d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001003  00000000  00000000  000074fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00008504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002be  00000000  00000000  000086a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000090e  00000000  00000000  00008962  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <main>
      7a:	0c 94 27 10 	jmp	0x204e	; 0x204e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e7       	ldi	r26, 0x70	; 112
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e7       	ldi	r24, 0x70	; 112
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 ef 05 	call	0xbde	; 0xbde <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__epilogue_restores__+0x18>

00000742 <__floatsisf>:
     742:	a8 e0       	ldi	r26, 0x08	; 8
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__prologue_saves__+0x12>
     74e:	9b 01       	movw	r18, r22
     750:	ac 01       	movw	r20, r24
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	89 83       	std	Y+1, r24	; 0x01
     756:	da 01       	movw	r26, r20
     758:	c9 01       	movw	r24, r18
     75a:	88 27       	eor	r24, r24
     75c:	b7 fd       	sbrc	r27, 7
     75e:	83 95       	inc	r24
     760:	99 27       	eor	r25, r25
     762:	aa 27       	eor	r26, r26
     764:	bb 27       	eor	r27, r27
     766:	b8 2e       	mov	r11, r24
     768:	21 15       	cp	r18, r1
     76a:	31 05       	cpc	r19, r1
     76c:	41 05       	cpc	r20, r1
     76e:	51 05       	cpc	r21, r1
     770:	19 f4       	brne	.+6      	; 0x778 <__floatsisf+0x36>
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	3a c0       	rjmp	.+116    	; 0x7ec <__floatsisf+0xaa>
     778:	88 23       	and	r24, r24
     77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x64>
     77c:	20 30       	cpi	r18, 0x00	; 0
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	38 07       	cpc	r19, r24
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	48 07       	cpc	r20, r24
     786:	80 e8       	ldi	r24, 0x80	; 128
     788:	58 07       	cpc	r21, r24
     78a:	29 f4       	brne	.+10     	; 0x796 <__floatsisf+0x54>
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	9f ec       	ldi	r25, 0xCF	; 207
     794:	30 c0       	rjmp	.+96     	; 0x7f6 <__floatsisf+0xb4>
     796:	ee 24       	eor	r14, r14
     798:	ff 24       	eor	r15, r15
     79a:	87 01       	movw	r16, r14
     79c:	e2 1a       	sub	r14, r18
     79e:	f3 0a       	sbc	r15, r19
     7a0:	04 0b       	sbc	r16, r20
     7a2:	15 0b       	sbc	r17, r21
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <__floatsisf+0x68>
     7a6:	79 01       	movw	r14, r18
     7a8:	8a 01       	movw	r16, r20
     7aa:	8e e1       	ldi	r24, 0x1E	; 30
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	dc 82       	std	Y+4, r13	; 0x04
     7b2:	cb 82       	std	Y+3, r12	; 0x03
     7b4:	ed 82       	std	Y+5, r14	; 0x05
     7b6:	fe 82       	std	Y+6, r15	; 0x06
     7b8:	0f 83       	std	Y+7, r16	; 0x07
     7ba:	18 87       	std	Y+8, r17	; 0x08
     7bc:	c8 01       	movw	r24, r16
     7be:	b7 01       	movw	r22, r14
     7c0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__clzsi2>
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	84 f4       	brge	.+32     	; 0x7ec <__floatsisf+0xaa>
     7cc:	08 2e       	mov	r0, r24
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <__floatsisf+0x96>
     7d0:	ee 0c       	add	r14, r14
     7d2:	ff 1c       	adc	r15, r15
     7d4:	00 1f       	adc	r16, r16
     7d6:	11 1f       	adc	r17, r17
     7d8:	0a 94       	dec	r0
     7da:	d2 f7       	brpl	.-12     	; 0x7d0 <__floatsisf+0x8e>
     7dc:	ed 82       	std	Y+5, r14	; 0x05
     7de:	fe 82       	std	Y+6, r15	; 0x06
     7e0:	0f 83       	std	Y+7, r16	; 0x07
     7e2:	18 87       	std	Y+8, r17	; 0x08
     7e4:	c8 1a       	sub	r12, r24
     7e6:	d9 0a       	sbc	r13, r25
     7e8:	dc 82       	std	Y+4, r13	; 0x04
     7ea:	cb 82       	std	Y+3, r12	; 0x03
     7ec:	ba 82       	std	Y+2, r11	; 0x02
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 a2 04 	call	0x944	; 0x944 <__pack_f>
     7f6:	28 96       	adiw	r28, 0x08	; 8
     7f8:	e9 e0       	ldi	r30, 0x09	; 9
     7fa:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__epilogue_restores__+0x12>

000007fe <__fixsfsi>:
     7fe:	ac e0       	ldi	r26, 0x0C	; 12
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x20>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	be 01       	movw	r22, r28
     818:	6b 5f       	subi	r22, 0xFB	; 251
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	0e 94 77 05 	call	0xaee	; 0xaee <__unpack_f>
     820:	8d 81       	ldd	r24, Y+5	; 0x05
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	61 f1       	breq	.+88     	; 0x87e <__fixsfsi+0x80>
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	50 f1       	brcs	.+84     	; 0x87e <__fixsfsi+0x80>
     82a:	84 30       	cpi	r24, 0x04	; 4
     82c:	21 f4       	brne	.+8      	; 0x836 <__fixsfsi+0x38>
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	88 23       	and	r24, r24
     832:	51 f1       	breq	.+84     	; 0x888 <__fixsfsi+0x8a>
     834:	2e c0       	rjmp	.+92     	; 0x892 <__fixsfsi+0x94>
     836:	2f 81       	ldd	r18, Y+7	; 0x07
     838:	38 85       	ldd	r19, Y+8	; 0x08
     83a:	37 fd       	sbrc	r19, 7
     83c:	20 c0       	rjmp	.+64     	; 0x87e <__fixsfsi+0x80>
     83e:	6e 81       	ldd	r22, Y+6	; 0x06
     840:	2f 31       	cpi	r18, 0x1F	; 31
     842:	31 05       	cpc	r19, r1
     844:	1c f0       	brlt	.+6      	; 0x84c <__fixsfsi+0x4e>
     846:	66 23       	and	r22, r22
     848:	f9 f0       	breq	.+62     	; 0x888 <__fixsfsi+0x8a>
     84a:	23 c0       	rjmp	.+70     	; 0x892 <__fixsfsi+0x94>
     84c:	8e e1       	ldi	r24, 0x1E	; 30
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	4b 85       	ldd	r20, Y+11	; 0x0b
     85a:	5c 85       	ldd	r21, Y+12	; 0x0c
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__fixsfsi+0x68>
     85e:	56 95       	lsr	r21
     860:	47 95       	ror	r20
     862:	37 95       	ror	r19
     864:	27 95       	ror	r18
     866:	8a 95       	dec	r24
     868:	d2 f7       	brpl	.-12     	; 0x85e <__fixsfsi+0x60>
     86a:	66 23       	and	r22, r22
     86c:	b1 f0       	breq	.+44     	; 0x89a <__fixsfsi+0x9c>
     86e:	50 95       	com	r21
     870:	40 95       	com	r20
     872:	30 95       	com	r19
     874:	21 95       	neg	r18
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	4f 4f       	sbci	r20, 0xFF	; 255
     87a:	5f 4f       	sbci	r21, 0xFF	; 255
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	09 c0       	rjmp	.+18     	; 0x89a <__fixsfsi+0x9c>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	3f ef       	ldi	r19, 0xFF	; 255
     88c:	4f ef       	ldi	r20, 0xFF	; 255
     88e:	5f e7       	ldi	r21, 0x7F	; 127
     890:	04 c0       	rjmp	.+8      	; 0x89a <__fixsfsi+0x9c>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	50 e8       	ldi	r21, 0x80	; 128
     89a:	b9 01       	movw	r22, r18
     89c:	ca 01       	movw	r24, r20
     89e:	2c 96       	adiw	r28, 0x0c	; 12
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x20>

000008a6 <__clzsi2>:
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	7b 01       	movw	r14, r22
     8b0:	8c 01       	movw	r16, r24
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	e8 16       	cp	r14, r24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	f8 06       	cpc	r15, r24
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	08 07       	cpc	r16, r24
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	18 07       	cpc	r17, r24
     8c2:	88 f4       	brcc	.+34     	; 0x8e6 <__clzsi2+0x40>
     8c4:	8f ef       	ldi	r24, 0xFF	; 255
     8c6:	e8 16       	cp	r14, r24
     8c8:	f1 04       	cpc	r15, r1
     8ca:	01 05       	cpc	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	31 f0       	breq	.+12     	; 0x8dc <__clzsi2+0x36>
     8d0:	28 f0       	brcs	.+10     	; 0x8dc <__clzsi2+0x36>
     8d2:	88 e0       	ldi	r24, 0x08	; 8
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a0 e0       	ldi	r26, 0x00	; 0
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	17 c0       	rjmp	.+46     	; 0x90a <__clzsi2+0x64>
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a0 e0       	ldi	r26, 0x00	; 0
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	12 c0       	rjmp	.+36     	; 0x90a <__clzsi2+0x64>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	e8 16       	cp	r14, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	f8 06       	cpc	r15, r24
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 07       	cpc	r16, r24
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	18 07       	cpc	r17, r24
     8f6:	28 f0       	brcs	.+10     	; 0x902 <__clzsi2+0x5c>
     8f8:	88 e1       	ldi	r24, 0x18	; 24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	a0 e0       	ldi	r26, 0x00	; 0
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x64>
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	20 e2       	ldi	r18, 0x20	; 32
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	40 e0       	ldi	r20, 0x00	; 0
     910:	50 e0       	ldi	r21, 0x00	; 0
     912:	28 1b       	sub	r18, r24
     914:	39 0b       	sbc	r19, r25
     916:	4a 0b       	sbc	r20, r26
     918:	5b 0b       	sbc	r21, r27
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__clzsi2+0x7e>
     91c:	16 95       	lsr	r17
     91e:	07 95       	ror	r16
     920:	f7 94       	ror	r15
     922:	e7 94       	ror	r14
     924:	8a 95       	dec	r24
     926:	d2 f7       	brpl	.-12     	; 0x91c <__clzsi2+0x76>
     928:	f7 01       	movw	r30, r14
     92a:	e8 58       	subi	r30, 0x88	; 136
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	80 81       	ld	r24, Z
     930:	28 1b       	sub	r18, r24
     932:	31 09       	sbc	r19, r1
     934:	41 09       	sbc	r20, r1
     936:	51 09       	sbc	r21, r1
     938:	c9 01       	movw	r24, r18
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <__pack_f>:
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	fc 01       	movw	r30, r24
     950:	e4 80       	ldd	r14, Z+4	; 0x04
     952:	f5 80       	ldd	r15, Z+5	; 0x05
     954:	06 81       	ldd	r16, Z+6	; 0x06
     956:	17 81       	ldd	r17, Z+7	; 0x07
     958:	d1 80       	ldd	r13, Z+1	; 0x01
     95a:	80 81       	ld	r24, Z
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	48 f4       	brcc	.+18     	; 0x972 <__pack_f+0x2e>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	a0 e1       	ldi	r26, 0x10	; 16
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	e8 2a       	or	r14, r24
     96a:	f9 2a       	or	r15, r25
     96c:	0a 2b       	or	r16, r26
     96e:	1b 2b       	or	r17, r27
     970:	a5 c0       	rjmp	.+330    	; 0xabc <__pack_f+0x178>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	09 f4       	brne	.+2      	; 0x978 <__pack_f+0x34>
     976:	9f c0       	rjmp	.+318    	; 0xab6 <__pack_f+0x172>
     978:	82 30       	cpi	r24, 0x02	; 2
     97a:	21 f4       	brne	.+8      	; 0x984 <__pack_f+0x40>
     97c:	ee 24       	eor	r14, r14
     97e:	ff 24       	eor	r15, r15
     980:	87 01       	movw	r16, r14
     982:	05 c0       	rjmp	.+10     	; 0x98e <__pack_f+0x4a>
     984:	e1 14       	cp	r14, r1
     986:	f1 04       	cpc	r15, r1
     988:	01 05       	cpc	r16, r1
     98a:	11 05       	cpc	r17, r1
     98c:	19 f4       	brne	.+6      	; 0x994 <__pack_f+0x50>
     98e:	e0 e0       	ldi	r30, 0x00	; 0
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	96 c0       	rjmp	.+300    	; 0xac0 <__pack_f+0x17c>
     994:	62 81       	ldd	r22, Z+2	; 0x02
     996:	73 81       	ldd	r23, Z+3	; 0x03
     998:	9f ef       	ldi	r25, 0xFF	; 255
     99a:	62 38       	cpi	r22, 0x82	; 130
     99c:	79 07       	cpc	r23, r25
     99e:	0c f0       	brlt	.+2      	; 0x9a2 <__pack_f+0x5e>
     9a0:	5b c0       	rjmp	.+182    	; 0xa58 <__pack_f+0x114>
     9a2:	22 e8       	ldi	r18, 0x82	; 130
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	26 1b       	sub	r18, r22
     9a8:	37 0b       	sbc	r19, r23
     9aa:	2a 31       	cpi	r18, 0x1A	; 26
     9ac:	31 05       	cpc	r19, r1
     9ae:	2c f0       	brlt	.+10     	; 0x9ba <__pack_f+0x76>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	2a c0       	rjmp	.+84     	; 0xa0e <__pack_f+0xca>
     9ba:	b8 01       	movw	r22, r16
     9bc:	a7 01       	movw	r20, r14
     9be:	02 2e       	mov	r0, r18
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__pack_f+0x86>
     9c2:	76 95       	lsr	r23
     9c4:	67 95       	ror	r22
     9c6:	57 95       	ror	r21
     9c8:	47 95       	ror	r20
     9ca:	0a 94       	dec	r0
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__pack_f+0x7e>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x9c>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	aa 1f       	adc	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	2a 95       	dec	r18
     9e2:	d2 f7       	brpl	.-12     	; 0x9d8 <__pack_f+0x94>
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	a1 09       	sbc	r26, r1
     9e8:	b1 09       	sbc	r27, r1
     9ea:	8e 21       	and	r24, r14
     9ec:	9f 21       	and	r25, r15
     9ee:	a0 23       	and	r26, r16
     9f0:	b1 23       	and	r27, r17
     9f2:	00 97       	sbiw	r24, 0x00	; 0
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	21 f0       	breq	.+8      	; 0xa02 <__pack_f+0xbe>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	9a 01       	movw	r18, r20
     a04:	ab 01       	movw	r20, r22
     a06:	28 2b       	or	r18, r24
     a08:	39 2b       	or	r19, r25
     a0a:	4a 2b       	or	r20, r26
     a0c:	5b 2b       	or	r21, r27
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	8f 77       	andi	r24, 0x7F	; 127
     a14:	90 70       	andi	r25, 0x00	; 0
     a16:	a0 70       	andi	r26, 0x00	; 0
     a18:	b0 70       	andi	r27, 0x00	; 0
     a1a:	80 34       	cpi	r24, 0x40	; 64
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	39 f4       	brne	.+14     	; 0xa32 <__pack_f+0xee>
     a24:	27 ff       	sbrs	r18, 7
     a26:	09 c0       	rjmp	.+18     	; 0xa3a <__pack_f+0xf6>
     a28:	20 5c       	subi	r18, 0xC0	; 192
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0xf6>
     a32:	21 5c       	subi	r18, 0xC1	; 193
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	4f 4f       	sbci	r20, 0xFF	; 255
     a38:	5f 4f       	sbci	r21, 0xFF	; 255
     a3a:	e0 e0       	ldi	r30, 0x00	; 0
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	3a 07       	cpc	r19, r26
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	4a 07       	cpc	r20, r26
     a48:	a0 e4       	ldi	r26, 0x40	; 64
     a4a:	5a 07       	cpc	r21, r26
     a4c:	10 f0       	brcs	.+4      	; 0xa52 <__pack_f+0x10e>
     a4e:	e1 e0       	ldi	r30, 0x01	; 1
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	79 01       	movw	r14, r18
     a54:	8a 01       	movw	r16, r20
     a56:	27 c0       	rjmp	.+78     	; 0xaa6 <__pack_f+0x162>
     a58:	60 38       	cpi	r22, 0x80	; 128
     a5a:	71 05       	cpc	r23, r1
     a5c:	64 f5       	brge	.+88     	; 0xab6 <__pack_f+0x172>
     a5e:	fb 01       	movw	r30, r22
     a60:	e1 58       	subi	r30, 0x81	; 129
     a62:	ff 4f       	sbci	r31, 0xFF	; 255
     a64:	d8 01       	movw	r26, r16
     a66:	c7 01       	movw	r24, r14
     a68:	8f 77       	andi	r24, 0x7F	; 127
     a6a:	90 70       	andi	r25, 0x00	; 0
     a6c:	a0 70       	andi	r26, 0x00	; 0
     a6e:	b0 70       	andi	r27, 0x00	; 0
     a70:	80 34       	cpi	r24, 0x40	; 64
     a72:	91 05       	cpc	r25, r1
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	39 f4       	brne	.+14     	; 0xa88 <__pack_f+0x144>
     a7a:	e7 fe       	sbrs	r14, 7
     a7c:	0d c0       	rjmp	.+26     	; 0xa98 <__pack_f+0x154>
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__pack_f+0x14c>
     a88:	8f e3       	ldi	r24, 0x3F	; 63
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a0 e0       	ldi	r26, 0x00	; 0
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e8 0e       	add	r14, r24
     a92:	f9 1e       	adc	r15, r25
     a94:	0a 1f       	adc	r16, r26
     a96:	1b 1f       	adc	r17, r27
     a98:	17 ff       	sbrs	r17, 7
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x162>
     a9c:	16 95       	lsr	r17
     a9e:	07 95       	ror	r16
     aa0:	f7 94       	ror	r15
     aa2:	e7 94       	ror	r14
     aa4:	31 96       	adiw	r30, 0x01	; 1
     aa6:	87 e0       	ldi	r24, 0x07	; 7
     aa8:	16 95       	lsr	r17
     aaa:	07 95       	ror	r16
     aac:	f7 94       	ror	r15
     aae:	e7 94       	ror	r14
     ab0:	8a 95       	dec	r24
     ab2:	d1 f7       	brne	.-12     	; 0xaa8 <__pack_f+0x164>
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__pack_f+0x17c>
     ab6:	ee 24       	eor	r14, r14
     ab8:	ff 24       	eor	r15, r15
     aba:	87 01       	movw	r16, r14
     abc:	ef ef       	ldi	r30, 0xFF	; 255
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	6e 2f       	mov	r22, r30
     ac2:	67 95       	ror	r22
     ac4:	66 27       	eor	r22, r22
     ac6:	67 95       	ror	r22
     ac8:	90 2f       	mov	r25, r16
     aca:	9f 77       	andi	r25, 0x7F	; 127
     acc:	d7 94       	ror	r13
     ace:	dd 24       	eor	r13, r13
     ad0:	d7 94       	ror	r13
     ad2:	8e 2f       	mov	r24, r30
     ad4:	86 95       	lsr	r24
     ad6:	49 2f       	mov	r20, r25
     ad8:	46 2b       	or	r20, r22
     ada:	58 2f       	mov	r21, r24
     adc:	5d 29       	or	r21, r13
     ade:	b7 01       	movw	r22, r14
     ae0:	ca 01       	movw	r24, r20
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	08 95       	ret

00000aee <__unpack_f>:
     aee:	fc 01       	movw	r30, r24
     af0:	db 01       	movw	r26, r22
     af2:	40 81       	ld	r20, Z
     af4:	51 81       	ldd	r21, Z+1	; 0x01
     af6:	22 81       	ldd	r18, Z+2	; 0x02
     af8:	62 2f       	mov	r22, r18
     afa:	6f 77       	andi	r22, 0x7F	; 127
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	22 1f       	adc	r18, r18
     b00:	22 27       	eor	r18, r18
     b02:	22 1f       	adc	r18, r18
     b04:	93 81       	ldd	r25, Z+3	; 0x03
     b06:	89 2f       	mov	r24, r25
     b08:	88 0f       	add	r24, r24
     b0a:	82 2b       	or	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	99 1f       	adc	r25, r25
     b12:	99 27       	eor	r25, r25
     b14:	99 1f       	adc	r25, r25
     b16:	11 96       	adiw	r26, 0x01	; 1
     b18:	9c 93       	st	X, r25
     b1a:	11 97       	sbiw	r26, 0x01	; 1
     b1c:	21 15       	cp	r18, r1
     b1e:	31 05       	cpc	r19, r1
     b20:	a9 f5       	brne	.+106    	; 0xb8c <__unpack_f+0x9e>
     b22:	41 15       	cp	r20, r1
     b24:	51 05       	cpc	r21, r1
     b26:	61 05       	cpc	r22, r1
     b28:	71 05       	cpc	r23, r1
     b2a:	11 f4       	brne	.+4      	; 0xb30 <__unpack_f+0x42>
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	37 c0       	rjmp	.+110    	; 0xb9e <__unpack_f+0xb0>
     b30:	82 e8       	ldi	r24, 0x82	; 130
     b32:	9f ef       	ldi	r25, 0xFF	; 255
     b34:	13 96       	adiw	r26, 0x03	; 3
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	9a 01       	movw	r18, r20
     b3e:	ab 01       	movw	r20, r22
     b40:	67 e0       	ldi	r22, 0x07	; 7
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	44 1f       	adc	r20, r20
     b48:	55 1f       	adc	r21, r21
     b4a:	6a 95       	dec	r22
     b4c:	d1 f7       	brne	.-12     	; 0xb42 <__unpack_f+0x54>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	8c 93       	st	X, r24
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <__unpack_f+0x80>
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	44 1f       	adc	r20, r20
     b5a:	55 1f       	adc	r21, r21
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	8d 91       	ld	r24, X+
     b60:	9c 91       	ld	r25, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	13 96       	adiw	r26, 0x03	; 3
     b68:	9c 93       	st	X, r25
     b6a:	8e 93       	st	-X, r24
     b6c:	12 97       	sbiw	r26, 0x02	; 2
     b6e:	20 30       	cpi	r18, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	38 07       	cpc	r19, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	48 07       	cpc	r20, r24
     b78:	80 e4       	ldi	r24, 0x40	; 64
     b7a:	58 07       	cpc	r21, r24
     b7c:	58 f3       	brcs	.-42     	; 0xb54 <__unpack_f+0x66>
     b7e:	14 96       	adiw	r26, 0x04	; 4
     b80:	2d 93       	st	X+, r18
     b82:	3d 93       	st	X+, r19
     b84:	4d 93       	st	X+, r20
     b86:	5c 93       	st	X, r21
     b88:	17 97       	sbiw	r26, 0x07	; 7
     b8a:	08 95       	ret
     b8c:	2f 3f       	cpi	r18, 0xFF	; 255
     b8e:	31 05       	cpc	r19, r1
     b90:	79 f4       	brne	.+30     	; 0xbb0 <__unpack_f+0xc2>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	19 f4       	brne	.+6      	; 0xba2 <__unpack_f+0xb4>
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	8c 93       	st	X, r24
     ba0:	08 95       	ret
     ba2:	64 ff       	sbrs	r22, 4
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <__unpack_f+0xbe>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24
     baa:	12 c0       	rjmp	.+36     	; 0xbd0 <__unpack_f+0xe2>
     bac:	1c 92       	st	X, r1
     bae:	10 c0       	rjmp	.+32     	; 0xbd0 <__unpack_f+0xe2>
     bb0:	2f 57       	subi	r18, 0x7F	; 127
     bb2:	30 40       	sbci	r19, 0x00	; 0
     bb4:	13 96       	adiw	r26, 0x03	; 3
     bb6:	3c 93       	st	X, r19
     bb8:	2e 93       	st	-X, r18
     bba:	12 97       	sbiw	r26, 0x02	; 2
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	44 0f       	add	r20, r20
     bc4:	55 1f       	adc	r21, r21
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	8a 95       	dec	r24
     bcc:	d1 f7       	brne	.-12     	; 0xbc2 <__unpack_f+0xd4>
     bce:	70 64       	ori	r23, 0x40	; 64
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	4d 93       	st	X+, r20
     bd4:	5d 93       	st	X+, r21
     bd6:	6d 93       	st	X+, r22
     bd8:	7c 93       	st	X, r23
     bda:	17 97       	sbiw	r26, 0x07	; 7
     bdc:	08 95       	ret

00000bde <__fpcmp_parts_f>:
     bde:	1f 93       	push	r17
     be0:	dc 01       	movw	r26, r24
     be2:	fb 01       	movw	r30, r22
     be4:	9c 91       	ld	r25, X
     be6:	92 30       	cpi	r25, 0x02	; 2
     be8:	08 f4       	brcc	.+2      	; 0xbec <__fpcmp_parts_f+0xe>
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bec:	80 81       	ld	r24, Z
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	08 f4       	brcc	.+2      	; 0xbf4 <__fpcmp_parts_f+0x16>
     bf2:	43 c0       	rjmp	.+134    	; 0xc7a <__fpcmp_parts_f+0x9c>
     bf4:	94 30       	cpi	r25, 0x04	; 4
     bf6:	51 f4       	brne	.+20     	; 0xc0c <__fpcmp_parts_f+0x2e>
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 91       	ld	r17, X
     bfc:	84 30       	cpi	r24, 0x04	; 4
     bfe:	99 f5       	brne	.+102    	; 0xc66 <__fpcmp_parts_f+0x88>
     c00:	81 81       	ldd	r24, Z+1	; 0x01
     c02:	68 2f       	mov	r22, r24
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	61 1b       	sub	r22, r17
     c08:	71 09       	sbc	r23, r1
     c0a:	3f c0       	rjmp	.+126    	; 0xc8a <__fpcmp_parts_f+0xac>
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	21 f0       	breq	.+8      	; 0xc18 <__fpcmp_parts_f+0x3a>
     c10:	92 30       	cpi	r25, 0x02	; 2
     c12:	31 f4       	brne	.+12     	; 0xc20 <__fpcmp_parts_f+0x42>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	b9 f1       	breq	.+110    	; 0xc86 <__fpcmp_parts_f+0xa8>
     c18:	81 81       	ldd	r24, Z+1	; 0x01
     c1a:	88 23       	and	r24, r24
     c1c:	89 f1       	breq	.+98     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c1e:	2d c0       	rjmp	.+90     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	1c 91       	ld	r17, X
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	f1 f0       	breq	.+60     	; 0xc66 <__fpcmp_parts_f+0x88>
     c2a:	81 81       	ldd	r24, Z+1	; 0x01
     c2c:	18 17       	cp	r17, r24
     c2e:	d9 f4       	brne	.+54     	; 0xc66 <__fpcmp_parts_f+0x88>
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	2d 91       	ld	r18, X+
     c34:	3c 91       	ld	r19, X
     c36:	13 97       	sbiw	r26, 0x03	; 3
     c38:	82 81       	ldd	r24, Z+2	; 0x02
     c3a:	93 81       	ldd	r25, Z+3	; 0x03
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	94 f0       	brlt	.+36     	; 0xc66 <__fpcmp_parts_f+0x88>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	bc f0       	brlt	.+46     	; 0xc76 <__fpcmp_parts_f+0x98>
     c48:	14 96       	adiw	r26, 0x04	; 4
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	24 81       	ldd	r18, Z+4	; 0x04
     c56:	35 81       	ldd	r19, Z+5	; 0x05
     c58:	46 81       	ldd	r20, Z+6	; 0x06
     c5a:	57 81       	ldd	r21, Z+7	; 0x07
     c5c:	28 17       	cp	r18, r24
     c5e:	39 07       	cpc	r19, r25
     c60:	4a 07       	cpc	r20, r26
     c62:	5b 07       	cpc	r21, r27
     c64:	18 f4       	brcc	.+6      	; 0xc6c <__fpcmp_parts_f+0x8e>
     c66:	11 23       	and	r17, r17
     c68:	41 f0       	breq	.+16     	; 0xc7a <__fpcmp_parts_f+0x9c>
     c6a:	0a c0       	rjmp	.+20     	; 0xc80 <__fpcmp_parts_f+0xa2>
     c6c:	82 17       	cp	r24, r18
     c6e:	93 07       	cpc	r25, r19
     c70:	a4 07       	cpc	r26, r20
     c72:	b5 07       	cpc	r27, r21
     c74:	40 f4       	brcc	.+16     	; 0xc86 <__fpcmp_parts_f+0xa8>
     c76:	11 23       	and	r17, r17
     c78:	19 f0       	breq	.+6      	; 0xc80 <__fpcmp_parts_f+0xa2>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <__fpcmp_parts_f+0xac>
     c80:	6f ef       	ldi	r22, 0xFF	; 255
     c82:	7f ef       	ldi	r23, 0xFF	; 255
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <__fpcmp_parts_f+0xac>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	cb 01       	movw	r24, r22
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <UART_Init>:
 */

#include "UART.h"

void UART_Init(void)
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	// bauderate
	UBRRL = 51;
     c98:	e9 e2       	ldi	r30, 0x29	; 41
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	83 e3       	ldi	r24, 0x33	; 51
     c9e:	80 83       	st	Z, r24

	// normal mode
	CLEAR_BIT(UCSRA, U2X);
     ca0:	ab e2       	ldi	r26, 0x2B	; 43
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	eb e2       	ldi	r30, 0x2B	; 43
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8d 7f       	andi	r24, 0xFD	; 253
     cac:	8c 93       	st	X, r24

	// no barity
	// 8 bit data init value by default

	//enable
	SET_BIT(UCSRB,TXEN);
     cae:	aa e2       	ldi	r26, 0x2A	; 42
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	ea e2       	ldi	r30, 0x2A	; 42
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	88 60       	ori	r24, 0x08	; 8
     cba:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN);
     cbc:	aa e2       	ldi	r26, 0x2A	; 42
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e2       	ldi	r30, 0x2A	; 42
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 61       	ori	r24, 0x10	; 16
     cc8:	8c 93       	st	X, r24
}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <UART_Send>:

void UART_Send(unsigned char data )
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	89 83       	std	Y+1, r24	; 0x01
	while(! READ_BIT(UCSRA,UDRE));
     cdc:	eb e2       	ldi	r30, 0x2B	; 43
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	88 2f       	mov	r24, r24
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	80 72       	andi	r24, 0x20	; 32
     ce8:	90 70       	andi	r25, 0x00	; 0
     cea:	95 95       	asr	r25
     cec:	87 95       	ror	r24
     cee:	95 95       	asr	r25
     cf0:	87 95       	ror	r24
     cf2:	95 95       	asr	r25
     cf4:	87 95       	ror	r24
     cf6:	95 95       	asr	r25
     cf8:	87 95       	ror	r24
     cfa:	95 95       	asr	r25
     cfc:	87 95       	ror	r24
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	69 f3       	breq	.-38     	; 0xcdc <UART_Send+0xc>
		UDR = data ;
     d02:	ec e2       	ldi	r30, 0x2C	; 44
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	80 83       	st	Z, r24
}
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <UART_Receive>:

unsigned char UART_Receive(void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
	while(!( READ_BIT(UCSRA,RXC)));
     d1a:	eb e2       	ldi	r30, 0x2B	; 43
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	88 1f       	adc	r24, r24
     d22:	88 27       	eor	r24, r24
     d24:	88 1f       	adc	r24, r24
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	90 70       	andi	r25, 0x00	; 0
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	a9 f3       	breq	.-22     	; 0xd1a <UART_Receive+0x8>
		return UDR ;
     d30:	ec e2       	ldi	r30, 0x2C	; 44
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <UART_SendNumberU32>:


void UART_SendNumberU32(unsigned int num)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <UART_SendNumberU32+0x6>
     d42:	00 d0       	rcall	.+0      	; 0xd44 <UART_SendNumberU32+0x8>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	9c 83       	std	Y+4, r25	; 0x04
     d4a:	8b 83       	std	Y+3, r24	; 0x03
	// UART_Send(num);
	// UART_Send(num>>8);
	// UART_Send(num>>16);
	// UART_Send(num>>24);

	unsigned char  *ptr = &num;
     d4c:	ce 01       	movw	r24, r28
     d4e:	03 96       	adiw	r24, 0x03	; 3
     d50:	9a 83       	std	Y+2, r25	; 0x02
     d52:	89 83       	std	Y+1, r24	; 0x01
	UART_Send(ptr[0]);
     d54:	e9 81       	ldd	r30, Y+1	; 0x01
     d56:	fa 81       	ldd	r31, Y+2	; 0x02
     d58:	80 81       	ld	r24, Z
     d5a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_Send>
	UART_Send(ptr[1]);
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	9a 81       	ldd	r25, Y+2	; 0x02
     d62:	fc 01       	movw	r30, r24
     d64:	31 96       	adiw	r30, 0x01	; 1
     d66:	80 81       	ld	r24, Z
     d68:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_Send>
	UART_Send(ptr[2]);
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	fc 01       	movw	r30, r24
     d72:	32 96       	adiw	r30, 0x02	; 2
     d74:	80 81       	ld	r24, Z
     d76:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_Send>
	UART_Send(ptr[3]);
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	fc 01       	movw	r30, r24
     d80:	33 96       	adiw	r30, 0x03	; 3
     d82:	80 81       	ld	r24, Z
     d84:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_Send>

}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <UART_ReceiveNumberU32>:

unsigned int UART_ReceiveNumberU32(void)
{
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	df 93       	push	r29
     d9c:	cf 93       	push	r28
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <UART_ReceiveNumberU32+0xa>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <UART_ReceiveNumberU32+0xc>
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62

	//u32 num1=0;
	// num = b1| (u32)b2<<8 | (u32)b3<<16 | (u32)b4<<24;

	unsigned int num;
	unsigned char *p = &num;
     da6:	ce 01       	movw	r24, r28
     da8:	03 96       	adiw	r24, 0x03	; 3
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
	p[0] = UART_Receive();
     dae:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Receive>
     db2:	e9 81       	ldd	r30, Y+1	; 0x01
     db4:	fa 81       	ldd	r31, Y+2	; 0x02
     db6:	80 83       	st	Z, r24
	p[1] = UART_Receive();
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	8c 01       	movw	r16, r24
     dbe:	0f 5f       	subi	r16, 0xFF	; 255
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Receive>
     dc6:	f8 01       	movw	r30, r16
     dc8:	80 83       	st	Z, r24
	p[2] = UART_Receive();
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	8c 01       	movw	r16, r24
     dd0:	0e 5f       	subi	r16, 0xFE	; 254
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
     dd4:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Receive>
     dd8:	f8 01       	movw	r30, r16
     dda:	80 83       	st	Z, r24
	p[3] = UART_Receive();
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	8c 01       	movw	r16, r24
     de2:	0d 5f       	subi	r16, 0xFD	; 253
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Receive>
     dea:	f8 01       	movw	r30, r16
     dec:	80 83       	st	Z, r24
return num;
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <UART_Send_String>:

void UART_Send_String (char* str)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	00 d0       	rcall	.+0      	; 0xe0a <UART_Send_String+0x6>
     e0a:	0f 92       	push	r0
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	9b 83       	std	Y+3, r25	; 0x03
     e12:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char counter = 0 ;
     e14:	19 82       	std	Y+1, r1	; 0x01
     e16:	0e c0       	rjmp	.+28     	; 0xe34 <UART_Send_String+0x30>
	while (str[counter] != 0)
	{
		UART_Send(str[counter]) ;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	9b 81       	ldd	r25, Y+3	; 0x03
     e22:	fc 01       	movw	r30, r24
     e24:	e2 0f       	add	r30, r18
     e26:	f3 1f       	adc	r31, r19
     e28:	80 81       	ld	r24, Z
     e2a:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_Send>
		counter ++ ;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	89 83       	std	Y+1, r24	; 0x01
}

void UART_Send_String (char* str)
{
	unsigned char counter = 0 ;
	while (str[counter] != 0)
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	9b 81       	ldd	r25, Y+3	; 0x03
     e3e:	fc 01       	movw	r30, r24
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	39 f7       	brne	.-50     	; 0xe18 <UART_Send_String+0x14>
	{
		UART_Send(str[counter]) ;
		counter ++ ;
	}
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <UART_Receive_String>:


char* UART_Receive_String (void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	e7 97       	sbiw	r28, 0x37	; 55
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
	char data_ch = 0 ;
     e6a:	1d 82       	std	Y+5, r1	; 0x05
	char data_str[50] = {0} ;
     e6c:	82 e3       	ldi	r24, 0x32	; 50
     e6e:	fe 01       	movw	r30, r28
     e70:	36 96       	adiw	r30, 0x06	; 6
     e72:	df 01       	movw	r26, r30
     e74:	98 2f       	mov	r25, r24
     e76:	1d 92       	st	X+, r1
     e78:	9a 95       	dec	r25
     e7a:	e9 f7       	brne	.-6      	; 0xe76 <UART_Receive_String+0x20>
	char* p_str = data_str ;
     e7c:	ce 01       	movw	r24, r28
     e7e:	06 96       	adiw	r24, 0x06	; 6
     e80:	9c 83       	std	Y+4, r25	; 0x04
     e82:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char counter = 0 ;
     e84:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char i = 0 ;
     e86:	19 82       	std	Y+1, r1	; 0x01
     e88:	10 c0       	rjmp	.+32     	; 0xeaa <UART_Receive_String+0x54>

	while ((data_ch != 32) && (counter < 50))
	{
		data_ch = UART_Receive() ;
     e8a:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Receive>
     e8e:	8d 83       	std	Y+5, r24	; 0x05
		data_str[counter] = data_ch ;
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	ce 01       	movw	r24, r28
     e98:	06 96       	adiw	r24, 0x06	; 6
     e9a:	fc 01       	movw	r30, r24
     e9c:	e2 0f       	add	r30, r18
     e9e:	f3 1f       	adc	r31, r19
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	80 83       	st	Z, r24
		counter ++ ;
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	8a 83       	std	Y+2, r24	; 0x02
	char data_str[50] = {0} ;
	char* p_str = data_str ;
	unsigned char counter = 0 ;
	unsigned char i = 0 ;

	while ((data_ch != 32) && (counter < 50))
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	80 32       	cpi	r24, 0x20	; 32
     eae:	19 f0       	breq	.+6      	; 0xeb6 <UART_Receive_String+0x60>
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	82 33       	cpi	r24, 0x32	; 50
     eb4:	50 f3       	brcs	.-44     	; 0xe8a <UART_Receive_String+0x34>
	{
		data_ch = UART_Receive() ;
		data_str[counter] = data_ch ;
		counter ++ ;
	}
	counter = 0 ;
     eb6:	1a 82       	std	Y+2, r1	; 0x02
	return p_str ;
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
}
     ebc:	e7 96       	adiw	r28, 0x37	; 55
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <Keypad_init>:
#include "keypad.h"

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
     ed6:	a1 e3       	ldi	r26, 0x31	; 49
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e1 e3       	ldi	r30, 0x31	; 49
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 7f       	andi	r24, 0xF0	; 240
     ee2:	8c 93       	st	X, r24
	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
     ee4:	a1 e3       	ldi	r26, 0x31	; 49
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e1 e3       	ldi	r30, 0x31	; 49
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 6f       	ori	r24, 0xF0	; 240
     ef0:	8c 93       	st	X, r24
	KEYPAD_PORT = 0xFF;
     ef2:	e2 e3       	ldi	r30, 0x32	; 50
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	80 83       	st	Z, r24
}
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <Keypad_getkey>:

char Keypad_getkey(){
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	27 97       	sbiw	r28, 0x07	; 7
     f0a:	0f b6       	in	r0, 0x3f	; 63
     f0c:	f8 94       	cli
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	cd bf       	out	0x3d, r28	; 61
	int i,j;
	for (i = 0; i < 4; i++){
     f14:	1c 82       	std	Y+4, r1	; 0x04
     f16:	1b 82       	std	Y+3, r1	; 0x03
     f18:	37 c1       	rjmp	.+622    	; 0x1188 <Keypad_getkey+0x288>
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
     f1a:	a2 e3       	ldi	r26, 0x32	; 50
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e2 e3       	ldi	r30, 0x32	; 50
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	58 2f       	mov	r21, r24
     f26:	20 91 80 01 	lds	r18, 0x0180
     f2a:	30 91 81 01 	lds	r19, 0x0181
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <Keypad_getkey+0x38>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	2a 95       	dec	r18
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <Keypad_getkey+0x34>
     f3c:	48 2f       	mov	r20, r24
     f3e:	20 91 82 01 	lds	r18, 0x0182
     f42:	30 91 83 01 	lds	r19, 0x0183
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <Keypad_getkey+0x50>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	2a 95       	dec	r18
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <Keypad_getkey+0x4c>
     f54:	48 2b       	or	r20, r24
     f56:	20 91 84 01 	lds	r18, 0x0184
     f5a:	30 91 85 01 	lds	r19, 0x0185
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <Keypad_getkey+0x68>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	2a 95       	dec	r18
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <Keypad_getkey+0x64>
     f6c:	48 2b       	or	r20, r24
     f6e:	20 91 86 01 	lds	r18, 0x0186
     f72:	30 91 87 01 	lds	r19, 0x0187
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <Keypad_getkey+0x80>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	2a 95       	dec	r18
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <Keypad_getkey+0x7c>
     f84:	84 2b       	or	r24, r20
     f86:	85 2b       	or	r24, r21
     f88:	8c 93       	st	X, r24
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
     f8a:	a2 e3       	ldi	r26, 0x32	; 50
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e2 e3       	ldi	r30, 0x32	; 50
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	fc 01       	movw	r30, r24
     fa0:	e0 58       	subi	r30, 0x80	; 128
     fa2:	fe 4f       	sbci	r31, 0xFE	; 254
     fa4:	20 81       	ld	r18, Z
     fa6:	31 81       	ldd	r19, Z+1	; 0x01
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <Keypad_getkey+0xb4>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <Keypad_getkey+0xb0>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
		for(j = 0; j < 4; j++){
     fbe:	1a 82       	std	Y+2, r1	; 0x02
     fc0:	19 82       	std	Y+1, r1	; 0x01
     fc2:	d7 c0       	rjmp	.+430    	; 0x1172 <Keypad_getkey+0x272>
			if (!(keypadPIN & (1 << Key_padRow[j])))
     fc4:	e0 e3       	ldi	r30, 0x30	; 48
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	9a 81       	ldd	r25, Y+2	; 0x02
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	fc 01       	movw	r30, r24
     fd8:	e8 58       	subi	r30, 0x88	; 136
     fda:	fe 4f       	sbci	r31, 0xFE	; 254
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	a9 01       	movw	r20, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <Keypad_getkey+0xe8>
     fe4:	55 95       	asr	r21
     fe6:	47 95       	ror	r20
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <Keypad_getkey+0xe4>
     fec:	ca 01       	movw	r24, r20
     fee:	81 70       	andi	r24, 0x01	; 1
     ff0:	90 70       	andi	r25, 0x00	; 0
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	09 f0       	breq	.+2      	; 0xff8 <Keypad_getkey+0xf8>
     ff6:	b8 c0       	rjmp	.+368    	; 0x1168 <Keypad_getkey+0x268>
			{
				while(!(keypadPIN & (1 << Key_padRow[j])));
     ff8:	e0 e3       	ldi	r30, 0x30	; 48
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	fc 01       	movw	r30, r24
    100c:	e8 58       	subi	r30, 0x88	; 136
    100e:	fe 4f       	sbci	r31, 0xFE	; 254
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	a9 01       	movw	r20, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <Keypad_getkey+0x11c>
    1018:	55 95       	asr	r21
    101a:	47 95       	ror	r20
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <Keypad_getkey+0x118>
    1020:	ca 01       	movw	r24, r20
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	39 f3       	breq	.-50     	; 0xff8 <Keypad_getkey+0xf8>
				switch(i){
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	9f 83       	std	Y+7, r25	; 0x07
    1030:	8e 83       	std	Y+6, r24	; 0x06
    1032:	4e 81       	ldd	r20, Y+6	; 0x06
    1034:	5f 81       	ldd	r21, Y+7	; 0x07
    1036:	41 30       	cpi	r20, 0x01	; 1
    1038:	51 05       	cpc	r21, r1
    103a:	c1 f1       	breq	.+112    	; 0x10ac <Keypad_getkey+0x1ac>
    103c:	8e 81       	ldd	r24, Y+6	; 0x06
    103e:	9f 81       	ldd	r25, Y+7	; 0x07
    1040:	82 30       	cpi	r24, 0x02	; 2
    1042:	91 05       	cpc	r25, r1
    1044:	34 f4       	brge	.+12     	; 0x1052 <Keypad_getkey+0x152>
    1046:	4e 81       	ldd	r20, Y+6	; 0x06
    1048:	5f 81       	ldd	r21, Y+7	; 0x07
    104a:	41 15       	cp	r20, r1
    104c:	51 05       	cpc	r21, r1
    104e:	71 f0       	breq	.+28     	; 0x106c <Keypad_getkey+0x16c>
    1050:	8b c0       	rjmp	.+278    	; 0x1168 <Keypad_getkey+0x268>
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	91 05       	cpc	r25, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <Keypad_getkey+0x15e>
    105c:	47 c0       	rjmp	.+142    	; 0x10ec <Keypad_getkey+0x1ec>
    105e:	4e 81       	ldd	r20, Y+6	; 0x06
    1060:	5f 81       	ldd	r21, Y+7	; 0x07
    1062:	43 30       	cpi	r20, 0x03	; 3
    1064:	51 05       	cpc	r21, r1
    1066:	09 f4       	brne	.+2      	; 0x106a <Keypad_getkey+0x16a>
    1068:	60 c0       	rjmp	.+192    	; 0x112a <Keypad_getkey+0x22a>
    106a:	7e c0       	rjmp	.+252    	; 0x1168 <Keypad_getkey+0x268>
					case (0):
						if (j == 0) return '7';
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	19 f4       	brne	.+6      	; 0x107a <Keypad_getkey+0x17a>
    1074:	57 e3       	ldi	r21, 0x37	; 55
    1076:	5d 83       	std	Y+5, r21	; 0x05
    1078:	8f c0       	rjmp	.+286    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 1) return '4';
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	19 f4       	brne	.+6      	; 0x108a <Keypad_getkey+0x18a>
    1084:	84 e3       	ldi	r24, 0x34	; 52
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	87 c0       	rjmp	.+270    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 2) return '1';
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	91 05       	cpc	r25, r1
    1092:	19 f4       	brne	.+6      	; 0x109a <Keypad_getkey+0x19a>
    1094:	91 e3       	ldi	r25, 0x31	; 49
    1096:	9d 83       	std	Y+5, r25	; 0x05
    1098:	7f c0       	rjmp	.+254    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 3) return '?';
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	91 05       	cpc	r25, r1
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <Keypad_getkey+0x1a6>
    10a4:	61 c0       	rjmp	.+194    	; 0x1168 <Keypad_getkey+0x268>
    10a6:	4f e3       	ldi	r20, 0x3F	; 63
    10a8:	4d 83       	std	Y+5, r20	; 0x05
    10aa:	76 c0       	rjmp	.+236    	; 0x1198 <Keypad_getkey+0x298>
						break;
					case (1):
						if (j == 0) return '8';
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	19 f4       	brne	.+6      	; 0x10ba <Keypad_getkey+0x1ba>
    10b4:	58 e3       	ldi	r21, 0x38	; 56
    10b6:	5d 83       	std	Y+5, r21	; 0x05
    10b8:	6f c0       	rjmp	.+222    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 1) return '5';
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	19 f4       	brne	.+6      	; 0x10ca <Keypad_getkey+0x1ca>
    10c4:	85 e3       	ldi	r24, 0x35	; 53
    10c6:	8d 83       	std	Y+5, r24	; 0x05
    10c8:	67 c0       	rjmp	.+206    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 2) return '2';
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	91 05       	cpc	r25, r1
    10d2:	19 f4       	brne	.+6      	; 0x10da <Keypad_getkey+0x1da>
    10d4:	92 e3       	ldi	r25, 0x32	; 50
    10d6:	9d 83       	std	Y+5, r25	; 0x05
    10d8:	5f c0       	rjmp	.+190    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 3) return '0';
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	83 30       	cpi	r24, 0x03	; 3
    10e0:	91 05       	cpc	r25, r1
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <Keypad_getkey+0x1e6>
    10e4:	41 c0       	rjmp	.+130    	; 0x1168 <Keypad_getkey+0x268>
    10e6:	40 e3       	ldi	r20, 0x30	; 48
    10e8:	4d 83       	std	Y+5, r20	; 0x05
    10ea:	56 c0       	rjmp	.+172    	; 0x1198 <Keypad_getkey+0x298>
						break;
					case (2):
						if (j == 0) return '9';
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	9a 81       	ldd	r25, Y+2	; 0x02
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	19 f4       	brne	.+6      	; 0x10fa <Keypad_getkey+0x1fa>
    10f4:	59 e3       	ldi	r21, 0x39	; 57
    10f6:	5d 83       	std	Y+5, r21	; 0x05
    10f8:	4f c0       	rjmp	.+158    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 1) return '6';
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	91 05       	cpc	r25, r1
    1102:	19 f4       	brne	.+6      	; 0x110a <Keypad_getkey+0x20a>
    1104:	86 e3       	ldi	r24, 0x36	; 54
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	47 c0       	rjmp	.+142    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 2) return '3';
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	9a 81       	ldd	r25, Y+2	; 0x02
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	91 05       	cpc	r25, r1
    1112:	19 f4       	brne	.+6      	; 0x111a <Keypad_getkey+0x21a>
    1114:	93 e3       	ldi	r25, 0x33	; 51
    1116:	9d 83       	std	Y+5, r25	; 0x05
    1118:	3f c0       	rjmp	.+126    	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 3) return '=';
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	9a 81       	ldd	r25, Y+2	; 0x02
    111e:	83 30       	cpi	r24, 0x03	; 3
    1120:	91 05       	cpc	r25, r1
    1122:	11 f5       	brne	.+68     	; 0x1168 <Keypad_getkey+0x268>
    1124:	4d e3       	ldi	r20, 0x3D	; 61
    1126:	4d 83       	std	Y+5, r20	; 0x05
    1128:	37 c0       	rjmp	.+110    	; 0x1198 <Keypad_getkey+0x298>
						break;
					case (3):
						if (j == 0) return '/';
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	19 f4       	brne	.+6      	; 0x1138 <Keypad_getkey+0x238>
    1132:	5f e2       	ldi	r21, 0x2F	; 47
    1134:	5d 83       	std	Y+5, r21	; 0x05
    1136:	30 c0       	rjmp	.+96     	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 1) return '*';
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	91 05       	cpc	r25, r1
    1140:	19 f4       	brne	.+6      	; 0x1148 <Keypad_getkey+0x248>
    1142:	8a e2       	ldi	r24, 0x2A	; 42
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	28 c0       	rjmp	.+80     	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 2) return '-';
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	91 05       	cpc	r25, r1
    1150:	19 f4       	brne	.+6      	; 0x1158 <Keypad_getkey+0x258>
    1152:	9d e2       	ldi	r25, 0x2D	; 45
    1154:	9d 83       	std	Y+5, r25	; 0x05
    1156:	20 c0       	rjmp	.+64     	; 0x1198 <Keypad_getkey+0x298>
						else if (j == 3) return '+';
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	91 05       	cpc	r25, r1
    1160:	19 f4       	brne	.+6      	; 0x1168 <Keypad_getkey+0x268>
    1162:	4b e2       	ldi	r20, 0x2B	; 43
    1164:	4d 83       	std	Y+5, r20	; 0x05
    1166:	18 c0       	rjmp	.+48     	; 0x1198 <Keypad_getkey+0x298>
char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
		KEYPAD_PORT |= ((1<<Key_padCol[0]) | (1<<Key_padCol[1]) | (1<<Key_padCol[2]) | (1<<Key_padCol[3]));
		KEYPAD_PORT &= ~(1<<Key_padCol[i]);
		for(j = 0; j < 4; j++){
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	9a 83       	std	Y+2, r25	; 0x02
    1170:	89 83       	std	Y+1, r24	; 0x01
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	84 30       	cpi	r24, 0x04	; 4
    1178:	91 05       	cpc	r25, r1
    117a:	0c f4       	brge	.+2      	; 0x117e <Keypad_getkey+0x27e>
    117c:	23 cf       	rjmp	.-442    	; 0xfc4 <Keypad_getkey+0xc4>
	KEYPAD_PORT = 0xFF;
}

char Keypad_getkey(){
	int i,j;
	for (i = 0; i < 4; i++){
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	01 96       	adiw	r24, 0x01	; 1
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	84 30       	cpi	r24, 0x04	; 4
    118e:	91 05       	cpc	r25, r1
    1190:	0c f4       	brge	.+2      	; 0x1194 <Keypad_getkey+0x294>
    1192:	c3 ce       	rjmp	.-634    	; 0xf1a <Keypad_getkey+0x1a>
						break;
				}
			}
		}
	}
	return 'A';
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	5d 83       	std	Y+5, r21	; 0x05
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
}
    119a:	27 96       	adiw	r28, 0x07	; 7
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <LCD_clear_screen>:
 *  Author: Marco
 */

#include "lcd.h"

void LCD_clear_screen(){
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_WRITE_COMMAND>
}
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <LCD_lcd_kick>:

void LCD_lcd_kick(){
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	2e 97       	sbiw	r28, 0x0e	; 14
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
	LCD_CTRL |= (1 << EN_SWITCH);
    11d4:	a8 e3       	ldi	r26, 0x38	; 56
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e8 e3       	ldi	r30, 0x38	; 56
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	88 60       	ori	r24, 0x08	; 8
    11e0:	8c 93       	st	X, r24
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a8 e4       	ldi	r26, 0x48	; 72
    11e8:	b2 e4       	ldi	r27, 0x42	; 66
    11ea:	8b 87       	std	Y+11, r24	; 0x0b
    11ec:	9c 87       	std	Y+12, r25	; 0x0c
    11ee:	ad 87       	std	Y+13, r26	; 0x0d
    11f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a e7       	ldi	r20, 0x7A	; 122
    1200:	53 e4       	ldi	r21, 0x43	; 67
    1202:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	8f 83       	std	Y+7, r24	; 0x07
    120c:	98 87       	std	Y+8, r25	; 0x08
    120e:	a9 87       	std	Y+9, r26	; 0x09
    1210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1212:	6f 81       	ldd	r22, Y+7	; 0x07
    1214:	78 85       	ldd	r23, Y+8	; 0x08
    1216:	89 85       	ldd	r24, Y+9	; 0x09
    1218:	9a 85       	ldd	r25, Y+10	; 0x0a
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e8       	ldi	r20, 0x80	; 128
    1220:	5f e3       	ldi	r21, 0x3F	; 63
    1222:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1226:	88 23       	and	r24, r24
    1228:	2c f4       	brge	.+10     	; 0x1234 <LCD_lcd_kick+0x74>
		__ticks = 1;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	9e 83       	std	Y+6, r25	; 0x06
    1230:	8d 83       	std	Y+5, r24	; 0x05
    1232:	3f c0       	rjmp	.+126    	; 0x12b2 <LCD_lcd_kick+0xf2>
	else if (__tmp > 65535)
    1234:	6f 81       	ldd	r22, Y+7	; 0x07
    1236:	78 85       	ldd	r23, Y+8	; 0x08
    1238:	89 85       	ldd	r24, Y+9	; 0x09
    123a:	9a 85       	ldd	r25, Y+10	; 0x0a
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	3f ef       	ldi	r19, 0xFF	; 255
    1240:	4f e7       	ldi	r20, 0x7F	; 127
    1242:	57 e4       	ldi	r21, 0x47	; 71
    1244:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1248:	18 16       	cp	r1, r24
    124a:	4c f5       	brge	.+82     	; 0x129e <LCD_lcd_kick+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124c:	6b 85       	ldd	r22, Y+11	; 0x0b
    124e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1250:	8d 85       	ldd	r24, Y+13	; 0x0d
    1252:	9e 85       	ldd	r25, Y+14	; 0x0e
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e2       	ldi	r20, 0x20	; 32
    125a:	51 e4       	ldi	r21, 0x41	; 65
    125c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	bc 01       	movw	r22, r24
    1266:	cd 01       	movw	r24, r26
    1268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	9e 83       	std	Y+6, r25	; 0x06
    1272:	8d 83       	std	Y+5, r24	; 0x05
    1274:	0f c0       	rjmp	.+30     	; 0x1294 <LCD_lcd_kick+0xd4>
    1276:	89 e1       	ldi	r24, 0x19	; 25
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9c 83       	std	Y+4, r25	; 0x04
    127c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <LCD_lcd_kick+0xc2>
    1286:	9c 83       	std	Y+4, r25	; 0x04
    1288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	69 f7       	brne	.-38     	; 0x1276 <LCD_lcd_kick+0xb6>
    129c:	14 c0       	rjmp	.+40     	; 0x12c6 <LCD_lcd_kick+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129e:	6f 81       	ldd	r22, Y+7	; 0x07
    12a0:	78 85       	ldd	r23, Y+8	; 0x08
    12a2:	89 85       	ldd	r24, Y+9	; 0x09
    12a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9e 83       	std	Y+6, r25	; 0x06
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	9a 83       	std	Y+2, r25	; 0x02
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <LCD_lcd_kick+0xfe>
    12c2:	9a 83       	std	Y+2, r25	; 0x02
    12c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
    12c6:	a8 e3       	ldi	r26, 0x38	; 56
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	87 7f       	andi	r24, 0xF7	; 247
    12d2:	8c 93       	st	X, r24
}
    12d4:	2e 96       	adiw	r28, 0x0e	; 14
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <LCD_GOTO_XY+0x6>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	6a 83       	std	Y+2, r22	; 0x02
	if (line == 1)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	39 f4       	brne	.+14     	; 0x1308 <LCD_GOTO_XY+0x22>
	{
		if (position < 16 && position >= 0)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	80 31       	cpi	r24, 0x10	; 16
    12fe:	20 f4       	brcc	.+8      	; 0x1308 <LCD_GOTO_XY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 58       	subi	r24, 0x80	; 128
    1304:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	82 30       	cpi	r24, 0x02	; 2
    130c:	39 f4       	brne	.+14     	; 0x131c <LCD_GOTO_XY+0x36>
	{
		if (position < 16 && position >= 0)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 31       	cpi	r24, 0x10	; 16
    1312:	20 f4       	brcc	.+8      	; 0x131c <LCD_GOTO_XY+0x36>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	80 54       	subi	r24, 0x40	; 64
    1318:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_WRITE_COMMAND>
		}
	}
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <LCD_INIT>:

void LCD_INIT(){
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	6c 97       	sbiw	r28, 0x1c	; 28
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	de bf       	out	0x3e, r29	; 62
    1336:	0f be       	out	0x3f, r0	; 63
    1338:	cd bf       	out	0x3d, r28	; 61
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a0 ea       	ldi	r26, 0xA0	; 160
    1340:	b1 e4       	ldi	r27, 0x41	; 65
    1342:	89 8f       	std	Y+25, r24	; 0x19
    1344:	9a 8f       	std	Y+26, r25	; 0x1a
    1346:	ab 8f       	std	Y+27, r26	; 0x1b
    1348:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134a:	69 8d       	ldd	r22, Y+25	; 0x19
    134c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1350:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	4a e7       	ldi	r20, 0x7A	; 122
    1358:	53 e4       	ldi	r21, 0x43	; 67
    135a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	8d 8b       	std	Y+21, r24	; 0x15
    1364:	9e 8b       	std	Y+22, r25	; 0x16
    1366:	af 8b       	std	Y+23, r26	; 0x17
    1368:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    136a:	6d 89       	ldd	r22, Y+21	; 0x15
    136c:	7e 89       	ldd	r23, Y+22	; 0x16
    136e:	8f 89       	ldd	r24, Y+23	; 0x17
    1370:	98 8d       	ldd	r25, Y+24	; 0x18
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e8       	ldi	r20, 0x80	; 128
    1378:	5f e3       	ldi	r21, 0x3F	; 63
    137a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    137e:	88 23       	and	r24, r24
    1380:	2c f4       	brge	.+10     	; 0x138c <LCD_INIT+0x66>
		__ticks = 1;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9c 8b       	std	Y+20, r25	; 0x14
    1388:	8b 8b       	std	Y+19, r24	; 0x13
    138a:	3f c0       	rjmp	.+126    	; 0x140a <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    138c:	6d 89       	ldd	r22, Y+21	; 0x15
    138e:	7e 89       	ldd	r23, Y+22	; 0x16
    1390:	8f 89       	ldd	r24, Y+23	; 0x17
    1392:	98 8d       	ldd	r25, Y+24	; 0x18
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	3f ef       	ldi	r19, 0xFF	; 255
    1398:	4f e7       	ldi	r20, 0x7F	; 127
    139a:	57 e4       	ldi	r21, 0x47	; 71
    139c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13a0:	18 16       	cp	r1, r24
    13a2:	4c f5       	brge	.+82     	; 0x13f6 <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a4:	69 8d       	ldd	r22, Y+25	; 0x19
    13a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e2       	ldi	r20, 0x20	; 32
    13b2:	51 e4       	ldi	r21, 0x41	; 65
    13b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	bc 01       	movw	r22, r24
    13be:	cd 01       	movw	r24, r26
    13c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	9c 8b       	std	Y+20, r25	; 0x14
    13ca:	8b 8b       	std	Y+19, r24	; 0x13
    13cc:	0f c0       	rjmp	.+30     	; 0x13ec <LCD_INIT+0xc6>
    13ce:	89 e1       	ldi	r24, 0x19	; 25
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9a 8b       	std	Y+18, r25	; 0x12
    13d4:	89 8b       	std	Y+17, r24	; 0x11
    13d6:	89 89       	ldd	r24, Y+17	; 0x11
    13d8:	9a 89       	ldd	r25, Y+18	; 0x12
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <LCD_INIT+0xb4>
    13de:	9a 8b       	std	Y+18, r25	; 0x12
    13e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e2:	8b 89       	ldd	r24, Y+19	; 0x13
    13e4:	9c 89       	ldd	r25, Y+20	; 0x14
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	9c 8b       	std	Y+20, r25	; 0x14
    13ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ec:	8b 89       	ldd	r24, Y+19	; 0x13
    13ee:	9c 89       	ldd	r25, Y+20	; 0x14
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	69 f7       	brne	.-38     	; 0x13ce <LCD_INIT+0xa8>
    13f4:	14 c0       	rjmp	.+40     	; 0x141e <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f6:	6d 89       	ldd	r22, Y+21	; 0x15
    13f8:	7e 89       	ldd	r23, Y+22	; 0x16
    13fa:	8f 89       	ldd	r24, Y+23	; 0x17
    13fc:	98 8d       	ldd	r25, Y+24	; 0x18
    13fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	9c 8b       	std	Y+20, r25	; 0x14
    1408:	8b 8b       	std	Y+19, r24	; 0x13
    140a:	8b 89       	ldd	r24, Y+19	; 0x13
    140c:	9c 89       	ldd	r25, Y+20	; 0x14
    140e:	98 8b       	std	Y+16, r25	; 0x10
    1410:	8f 87       	std	Y+15, r24	; 0x0f
    1412:	8f 85       	ldd	r24, Y+15	; 0x0f
    1414:	98 89       	ldd	r25, Y+16	; 0x10
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <LCD_INIT+0xf0>
    141a:	98 8b       	std	Y+16, r25	; 0x10
    141c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    141e:	a7 e3       	ldi	r26, 0x37	; 55
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e7 e3       	ldi	r30, 0x37	; 55
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8e 60       	ori	r24, 0x0E	; 14
    142a:	8c 93       	st	X, r24
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
    142c:	a8 e3       	ldi	r26, 0x38	; 56
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e8 e3       	ldi	r30, 0x38	; 56
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	81 7f       	andi	r24, 0xF1	; 241
    1438:	8c 93       	st	X, r24
	DataDir_LCD_PORT = 0xFF;
    143a:	ea e3       	ldi	r30, 0x3A	; 58
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	80 83       	st	Z, r24
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a0 e7       	ldi	r26, 0x70	; 112
    1448:	b1 e4       	ldi	r27, 0x41	; 65
    144a:	8b 87       	std	Y+11, r24	; 0x0b
    144c:	9c 87       	std	Y+12, r25	; 0x0c
    144e:	ad 87       	std	Y+13, r26	; 0x0d
    1450:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1452:	6b 85       	ldd	r22, Y+11	; 0x0b
    1454:	7c 85       	ldd	r23, Y+12	; 0x0c
    1456:	8d 85       	ldd	r24, Y+13	; 0x0d
    1458:	9e 85       	ldd	r25, Y+14	; 0x0e
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	4a e7       	ldi	r20, 0x7A	; 122
    1460:	53 e4       	ldi	r21, 0x43	; 67
    1462:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	8f 83       	std	Y+7, r24	; 0x07
    146c:	98 87       	std	Y+8, r25	; 0x08
    146e:	a9 87       	std	Y+9, r26	; 0x09
    1470:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1472:	6f 81       	ldd	r22, Y+7	; 0x07
    1474:	78 85       	ldd	r23, Y+8	; 0x08
    1476:	89 85       	ldd	r24, Y+9	; 0x09
    1478:	9a 85       	ldd	r25, Y+10	; 0x0a
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	40 e8       	ldi	r20, 0x80	; 128
    1480:	5f e3       	ldi	r21, 0x3F	; 63
    1482:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1486:	88 23       	and	r24, r24
    1488:	2c f4       	brge	.+10     	; 0x1494 <LCD_INIT+0x16e>
		__ticks = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	3f c0       	rjmp	.+126    	; 0x1512 <LCD_INIT+0x1ec>
	else if (__tmp > 65535)
    1494:	6f 81       	ldd	r22, Y+7	; 0x07
    1496:	78 85       	ldd	r23, Y+8	; 0x08
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	3f ef       	ldi	r19, 0xFF	; 255
    14a0:	4f e7       	ldi	r20, 0x7F	; 127
    14a2:	57 e4       	ldi	r21, 0x47	; 71
    14a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	4c f5       	brge	.+82     	; 0x14fe <LCD_INIT+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	40 e2       	ldi	r20, 0x20	; 32
    14ba:	51 e4       	ldi	r21, 0x41	; 65
    14bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
    14d4:	0f c0       	rjmp	.+30     	; 0x14f4 <LCD_INIT+0x1ce>
    14d6:	89 e1       	ldi	r24, 0x19	; 25
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9c 83       	std	Y+4, r25	; 0x04
    14dc:	8b 83       	std	Y+3, r24	; 0x03
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <LCD_INIT+0x1bc>
    14e6:	9c 83       	std	Y+4, r25	; 0x04
    14e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ea:	8d 81       	ldd	r24, Y+5	; 0x05
    14ec:	9e 81       	ldd	r25, Y+6	; 0x06
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	9e 83       	std	Y+6, r25	; 0x06
    14f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f4:	8d 81       	ldd	r24, Y+5	; 0x05
    14f6:	9e 81       	ldd	r25, Y+6	; 0x06
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	69 f7       	brne	.-38     	; 0x14d6 <LCD_INIT+0x1b0>
    14fc:	14 c0       	rjmp	.+40     	; 0x1526 <LCD_INIT+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	9e 81       	ldd	r25, Y+6	; 0x06
    1516:	9a 83       	std	Y+2, r25	; 0x02
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	9a 81       	ldd	r25, Y+2	; 0x02
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	f1 f7       	brne	.-4      	; 0x151e <LCD_INIT+0x1f8>
    1522:	9a 83       	std	Y+2, r25	; 0x02
    1524:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);
	LCD_clear_screen();
    1526:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    152a:	88 e3       	ldi	r24, 0x38	; 56
    152c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_WRITE_COMMAND>
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
    1530:	86 e0       	ldi	r24, 0x06	; 6
    1532:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    1536:	80 e8       	ldi	r24, 0x80	; 128
    1538:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
    153c:	8f e0       	ldi	r24, 0x0F	; 15
    153e:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_WRITE_COMMAND>
}
    1542:	6c 96       	adiw	r28, 0x1c	; 28
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <LCD_check_lcd_isbusy+0x6>
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
    155e:	ea e3       	ldi	r30, 0x3A	; 58
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	ea e3       	ldi	r30, 0x3A	; 58
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	10 82       	st	Z, r1
	LCD_CTRL |= (1 << RW_SWITCH);
    156a:	a8 e3       	ldi	r26, 0x38	; 56
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e8 e3       	ldi	r30, 0x38	; 56
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	84 60       	ori	r24, 0x04	; 4
    1576:	8c 93       	st	X, r24
	LCD_CTRL &= ~(1 << RS_SWITCH);
    1578:	a8 e3       	ldi	r26, 0x38	; 56
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e8 e3       	ldi	r30, 0x38	; 56
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8d 7f       	andi	r24, 0xFD	; 253
    1584:	8c 93       	st	X, r24
	LCD_lcd_kick();
    1586:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
    158a:	ea e3       	ldi	r30, 0x3A	; 58
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	ea e3       	ldi	r30, 0x3A	; 58
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	80 83       	st	Z, r24
	LCD_CTRL &= ~(1 << RW_SWITCH);
    1598:	a8 e3       	ldi	r26, 0x38	; 56
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e8 e3       	ldi	r30, 0x38	; 56
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	8b 7f       	andi	r24, 0xFB	; 251
    15a4:	8c 93       	st	X, r24

}
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command){
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	2f 97       	sbiw	r28, 0x0f	; 15
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    15c6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_check_lcd_isbusy>
		LCD_PORT = command;
    15ca:	eb e3       	ldi	r30, 0x3B	; 59
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d0:	80 83       	st	Z, r24
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
    15d2:	a8 e3       	ldi	r26, 0x38	; 56
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e8 e3       	ldi	r30, 0x38	; 56
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	89 7f       	andi	r24, 0xF9	; 249
    15de:	8c 93       	st	X, r24
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e8       	ldi	r26, 0x80	; 128
    15e6:	bf e3       	ldi	r27, 0x3F	; 63
    15e8:	8b 87       	std	Y+11, r24	; 0x0b
    15ea:	9c 87       	std	Y+12, r25	; 0x0c
    15ec:	ad 87       	std	Y+13, r26	; 0x0d
    15ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a e7       	ldi	r20, 0x7A	; 122
    15fe:	53 e4       	ldi	r21, 0x43	; 67
    1600:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8f 83       	std	Y+7, r24	; 0x07
    160a:	98 87       	std	Y+8, r25	; 0x08
    160c:	a9 87       	std	Y+9, r26	; 0x09
    160e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1610:	6f 81       	ldd	r22, Y+7	; 0x07
    1612:	78 85       	ldd	r23, Y+8	; 0x08
    1614:	89 85       	ldd	r24, Y+9	; 0x09
    1616:	9a 85       	ldd	r25, Y+10	; 0x0a
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <LCD_WRITE_COMMAND+0x82>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <LCD_WRITE_COMMAND+0x100>
	else if (__tmp > 65535)
    1632:	6f 81       	ldd	r22, Y+7	; 0x07
    1634:	78 85       	ldd	r23, Y+8	; 0x08
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <LCD_WRITE_COMMAND+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	6b 85       	ldd	r22, Y+11	; 0x0b
    164c:	7c 85       	ldd	r23, Y+12	; 0x0c
    164e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1650:	9e 85       	ldd	r25, Y+14	; 0x0e
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <LCD_WRITE_COMMAND+0xe2>
    1674:	89 e1       	ldi	r24, 0x19	; 25
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9c 83       	std	Y+4, r25	; 0x04
    167a:	8b 83       	std	Y+3, r24	; 0x03
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_WRITE_COMMAND+0xd0>
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	8d 81       	ldd	r24, Y+5	; 0x05
    1694:	9e 81       	ldd	r25, Y+6	; 0x06
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <LCD_WRITE_COMMAND+0xc4>
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <LCD_WRITE_COMMAND+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6f 81       	ldd	r22, Y+7	; 0x07
    169e:	78 85       	ldd	r23, Y+8	; 0x08
    16a0:	89 85       	ldd	r24, Y+9	; 0x09
    16a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	9a 81       	ldd	r25, Y+2	; 0x02
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_WRITE_COMMAND+0x10c>
    16c0:	9a 83       	std	Y+2, r25	; 0x02
    16c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    16c4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
    16c8:	2f 96       	adiw	r28, 0x0f	; 15
    16ca:	0f b6       	in	r0, 0x3f	; 63
    16cc:	f8 94       	cli
    16ce:	de bf       	out	0x3e, r29	; 62
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	cd bf       	out	0x3d, r28	; 61
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character){
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	2f 97       	sbiw	r28, 0x0f	; 15
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	f8 94       	cli
    16e8:	de bf       	out	0x3e, r29	; 62
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	cd bf       	out	0x3d, r28	; 61
    16ee:	8f 87       	std	Y+15, r24	; 0x0f
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
    16f0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <LCD_check_lcd_isbusy>
		LCD_PORT = character;
    16f4:	eb e3       	ldi	r30, 0x3B	; 59
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fa:	80 83       	st	Z, r24
		LCD_CTRL &= ~(1 << RW_SWITCH);
    16fc:	a8 e3       	ldi	r26, 0x38	; 56
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e8 e3       	ldi	r30, 0x38	; 56
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	8b 7f       	andi	r24, 0xFB	; 251
    1708:	8c 93       	st	X, r24
		LCD_CTRL |= (1 << RS_SWITCH);
    170a:	a8 e3       	ldi	r26, 0x38	; 56
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e8 e3       	ldi	r30, 0x38	; 56
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	82 60       	ori	r24, 0x02	; 2
    1716:	8c 93       	st	X, r24
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e8       	ldi	r26, 0x80	; 128
    171e:	bf e3       	ldi	r27, 0x3F	; 63
    1720:	8b 87       	std	Y+11, r24	; 0x0b
    1722:	9c 87       	std	Y+12, r25	; 0x0c
    1724:	ad 87       	std	Y+13, r26	; 0x0d
    1726:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1728:	6b 85       	ldd	r22, Y+11	; 0x0b
    172a:	7c 85       	ldd	r23, Y+12	; 0x0c
    172c:	8d 85       	ldd	r24, Y+13	; 0x0d
    172e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	4a e7       	ldi	r20, 0x7A	; 122
    1736:	53 e4       	ldi	r21, 0x43	; 67
    1738:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	8f 83       	std	Y+7, r24	; 0x07
    1742:	98 87       	std	Y+8, r25	; 0x08
    1744:	a9 87       	std	Y+9, r26	; 0x09
    1746:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1748:	6f 81       	ldd	r22, Y+7	; 0x07
    174a:	78 85       	ldd	r23, Y+8	; 0x08
    174c:	89 85       	ldd	r24, Y+9	; 0x09
    174e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e8       	ldi	r20, 0x80	; 128
    1756:	5f e3       	ldi	r21, 0x3F	; 63
    1758:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    175c:	88 23       	and	r24, r24
    175e:	2c f4       	brge	.+10     	; 0x176a <LCD_WRITE_CHAR+0x90>
		__ticks = 1;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9e 83       	std	Y+6, r25	; 0x06
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	3f c0       	rjmp	.+126    	; 0x17e8 <LCD_WRITE_CHAR+0x10e>
	else if (__tmp > 65535)
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	3f ef       	ldi	r19, 0xFF	; 255
    1776:	4f e7       	ldi	r20, 0x7F	; 127
    1778:	57 e4       	ldi	r21, 0x47	; 71
    177a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    177e:	18 16       	cp	r1, r24
    1780:	4c f5       	brge	.+82     	; 0x17d4 <LCD_WRITE_CHAR+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1782:	6b 85       	ldd	r22, Y+11	; 0x0b
    1784:	7c 85       	ldd	r23, Y+12	; 0x0c
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	9e 85       	ldd	r25, Y+14	; 0x0e
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <LCD_WRITE_CHAR+0xf0>
    17ac:	89 e1       	ldi	r24, 0x19	; 25
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	8b 83       	std	Y+3, r24	; 0x03
    17b4:	8b 81       	ldd	r24, Y+3	; 0x03
    17b6:	9c 81       	ldd	r25, Y+4	; 0x04
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_WRITE_CHAR+0xde>
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	8d 81       	ldd	r24, Y+5	; 0x05
    17c2:	9e 81       	ldd	r25, Y+6	; 0x06
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	69 f7       	brne	.-38     	; 0x17ac <LCD_WRITE_CHAR+0xd2>
    17d2:	14 c0       	rjmp	.+40     	; 0x17fc <LCD_WRITE_CHAR+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	9a 81       	ldd	r25, Y+2	; 0x02
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	f1 f7       	brne	.-4      	; 0x17f4 <LCD_WRITE_CHAR+0x11a>
    17f8:	9a 83       	std	Y+2, r25	; 0x02
    17fa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		LCD_lcd_kick();
    17fc:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
    1800:	2f 96       	adiw	r28, 0x0f	; 15
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	00 d0       	rcall	.+0      	; 0x1818 <LCD_WRITE_STRING+0x6>
    1818:	00 d0       	rcall	.+0      	; 0x181a <LCD_WRITE_STRING+0x8>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
    1822:	1a 82       	std	Y+2, r1	; 0x02
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	27 c0       	rjmp	.+78     	; 0x1876 <LCD_WRITE_STRING+0x64>
	while (*string > 0){
		count++;
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
		LCD_WRITE_CHAR(*string++);
    1832:	eb 81       	ldd	r30, Y+3	; 0x03
    1834:	fc 81       	ldd	r31, Y+4	; 0x04
    1836:	20 81       	ld	r18, Z
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
    1842:	82 2f       	mov	r24, r18
    1844:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_WRITE_CHAR>
		if (count == 16)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	9a 81       	ldd	r25, Y+2	; 0x02
    184c:	80 31       	cpi	r24, 0x10	; 16
    184e:	91 05       	cpc	r25, r1
    1850:	29 f4       	brne	.+10     	; 0x185c <LCD_WRITE_STRING+0x4a>
		{
			LCD_GOTO_XY(2,0);
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_GOTO_XY>
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <LCD_WRITE_STRING+0x64>
		}
		else if (count == 32)
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	80 32       	cpi	r24, 0x20	; 32
    1862:	91 05       	cpc	r25, r1
    1864:	41 f4       	brne	.+16     	; 0x1876 <LCD_WRITE_STRING+0x64>
		{
			LCD_clear_screen();
    1866:	0e 94 d6 08 	call	0x11ac	; 0x11ac <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_GOTO_XY>
			count = 0;
    1872:	1a 82       	std	Y+2, r1	; 0x02
    1874:	19 82       	std	Y+1, r1	; 0x01
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
    1876:	eb 81       	ldd	r30, Y+3	; 0x03
    1878:	fc 81       	ldd	r31, Y+4	; 0x04
    187a:	80 81       	ld	r24, Z
    187c:	88 23       	and	r24, r24
    187e:	a1 f6       	brne	.-88     	; 0x1828 <LCD_WRITE_STRING+0x16>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <LCD_display_number>:

void LCD_display_number (int num)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	29 97       	sbiw	r28, 0x09	; 9
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	99 87       	std	Y+9, r25	; 0x09
    18a4:	88 87       	std	Y+8, r24	; 0x08
	char str[7];
	sprintf(str,"%d",num);
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <LCD_display_number+0x1a>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <LCD_display_number+0x1c>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <LCD_display_number+0x1e>
    18ac:	ed b7       	in	r30, 0x3d	; 61
    18ae:	fe b7       	in	r31, 0x3e	; 62
    18b0:	31 96       	adiw	r30, 0x01	; 1
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	80 e6       	ldi	r24, 0x60	; 96
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	93 83       	std	Z+3, r25	; 0x03
    18c0:	82 83       	std	Z+2, r24	; 0x02
    18c2:	88 85       	ldd	r24, Y+8	; 0x08
    18c4:	99 85       	ldd	r25, Y+9	; 0x09
    18c6:	95 83       	std	Z+5, r25	; 0x05
    18c8:	84 83       	std	Z+4, r24	; 0x04
    18ca:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <sprintf>
    18ce:	8d b7       	in	r24, 0x3d	; 61
    18d0:	9e b7       	in	r25, 0x3e	; 62
    18d2:	06 96       	adiw	r24, 0x06	; 6
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	9e bf       	out	0x3e, r25	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	8d bf       	out	0x3d, r24	; 61
	LCD_WRITE_STRING(str);
    18de:	ce 01       	movw	r24, r28
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_WRITE_STRING>
}
    18e6:	29 96       	adiw	r28, 0x09	; 9
    18e8:	0f b6       	in	r0, 0x3f	; 63
    18ea:	f8 94       	cli
    18ec:	de bf       	out	0x3e, r29	; 62
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	cd bf       	out	0x3d, r28	; 61
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <LCD_display_real_number>:

void LCD_display_real_number (double num)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	a8 97       	sbiw	r28, 0x28	; 40
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	6f 8f       	std	Y+31, r22	; 0x1f
    190e:	78 a3       	std	Y+32, r23	; 0x20
    1910:	89 a3       	std	Y+33, r24	; 0x21
    1912:	9a a3       	std	Y+34, r25	; 0x22
	char str[16];
	char *tmpSign = (num <0)? "-" : "";
    1914:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1916:	78 a1       	ldd	r23, Y+32	; 0x20
    1918:	89 a1       	ldd	r24, Y+33	; 0x21
    191a:	9a a1       	ldd	r25, Y+34	; 0x22
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <LCD_display_real_number+0x3e>
    192c:	23 e6       	ldi	r18, 0x63	; 99
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	38 a7       	std	Y+40, r19	; 0x28
    1932:	2f a3       	std	Y+39, r18	; 0x27
    1934:	04 c0       	rjmp	.+8      	; 0x193e <LCD_display_real_number+0x46>
    1936:	45 e6       	ldi	r20, 0x65	; 101
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	58 a7       	std	Y+40, r21	; 0x28
    193c:	4f a3       	std	Y+39, r20	; 0x27
    193e:	8f a1       	ldd	r24, Y+39	; 0x27
    1940:	98 a5       	ldd	r25, Y+40	; 0x28
    1942:	9e 87       	std	Y+14, r25	; 0x0e
    1944:	8d 87       	std	Y+13, r24	; 0x0d
	float tmpVal = (num <0)? -num : num;
    1946:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1948:	78 a1       	ldd	r23, Y+32	; 0x20
    194a:	89 a1       	ldd	r24, Y+33	; 0x21
    194c:	9a a1       	ldd	r25, Y+34	; 0x22
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	64 f4       	brge	.+24     	; 0x1976 <LCD_display_real_number+0x7e>
    195e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1960:	98 a1       	ldd	r25, Y+32	; 0x20
    1962:	a9 a1       	ldd	r26, Y+33	; 0x21
    1964:	ba a1       	ldd	r27, Y+34	; 0x22
    1966:	9c 01       	movw	r18, r24
    1968:	ad 01       	movw	r20, r26
    196a:	50 58       	subi	r21, 0x80	; 128
    196c:	2b a3       	std	Y+35, r18	; 0x23
    196e:	3c a3       	std	Y+36, r19	; 0x24
    1970:	4d a3       	std	Y+37, r20	; 0x25
    1972:	5e a3       	std	Y+38, r21	; 0x26
    1974:	08 c0       	rjmp	.+16     	; 0x1986 <LCD_display_real_number+0x8e>
    1976:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1978:	98 a1       	ldd	r25, Y+32	; 0x20
    197a:	a9 a1       	ldd	r26, Y+33	; 0x21
    197c:	ba a1       	ldd	r27, Y+34	; 0x22
    197e:	8b a3       	std	Y+35, r24	; 0x23
    1980:	9c a3       	std	Y+36, r25	; 0x24
    1982:	ad a3       	std	Y+37, r26	; 0x25
    1984:	be a3       	std	Y+38, r27	; 0x26
    1986:	2b a1       	ldd	r18, Y+35	; 0x23
    1988:	3c a1       	ldd	r19, Y+36	; 0x24
    198a:	4d a1       	ldd	r20, Y+37	; 0x25
    198c:	5e a1       	ldd	r21, Y+38	; 0x26
    198e:	29 87       	std	Y+9, r18	; 0x09
    1990:	3a 87       	std	Y+10, r19	; 0x0a
    1992:	4b 87       	std	Y+11, r20	; 0x0b
    1994:	5c 87       	std	Y+12, r21	; 0x0c
	int tmpInt1 = tmpVal;
    1996:	69 85       	ldd	r22, Y+9	; 0x09
    1998:	7a 85       	ldd	r23, Y+10	; 0x0a
    199a:	8b 85       	ldd	r24, Y+11	; 0x0b
    199c:	9c 85       	ldd	r25, Y+12	; 0x0c
    199e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	98 87       	std	Y+8, r25	; 0x08
    19a8:	8f 83       	std	Y+7, r24	; 0x07
	float tmpFrac = tmpVal - tmpInt1;
    19aa:	8f 81       	ldd	r24, Y+7	; 0x07
    19ac:	98 85       	ldd	r25, Y+8	; 0x08
    19ae:	aa 27       	eor	r26, r26
    19b0:	97 fd       	sbrc	r25, 7
    19b2:	a0 95       	com	r26
    19b4:	ba 2f       	mov	r27, r26
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 a1 03 	call	0x742	; 0x742 <__floatsisf>
    19be:	9b 01       	movw	r18, r22
    19c0:	ac 01       	movw	r20, r24
    19c2:	69 85       	ldd	r22, Y+9	; 0x09
    19c4:	7a 85       	ldd	r23, Y+10	; 0x0a
    19c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    19ca:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8b 83       	std	Y+3, r24	; 0x03
    19d4:	9c 83       	std	Y+4, r25	; 0x04
    19d6:	ad 83       	std	Y+5, r26	; 0x05
    19d8:	be 83       	std	Y+6, r27	; 0x06
	int tmpInt2 = tmpFrac * 10000;
    19da:	6b 81       	ldd	r22, Y+3	; 0x03
    19dc:	7c 81       	ldd	r23, Y+4	; 0x04
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e4       	ldi	r19, 0x40	; 64
    19e6:	4c e1       	ldi	r20, 0x1C	; 28
    19e8:	56 e4       	ldi	r21, 0x46	; 70
    19ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	bc 01       	movw	r22, r24
    19f4:	cd 01       	movw	r24, r26
    19f6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fixsfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	89 83       	std	Y+1, r24	; 0x01
	sprintf(str, "%s%d.%04d", tmpSign, tmpInt1, tmpInt2);
    1a02:	4d b7       	in	r20, 0x3d	; 61
    1a04:	5e b7       	in	r21, 0x3e	; 62
    1a06:	4a 50       	subi	r20, 0x0A	; 10
    1a08:	50 40       	sbci	r21, 0x00	; 0
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	5e bf       	out	0x3e, r21	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	4d bf       	out	0x3d, r20	; 61
    1a14:	ed b7       	in	r30, 0x3d	; 61
    1a16:	fe b7       	in	r31, 0x3e	; 62
    1a18:	31 96       	adiw	r30, 0x01	; 1
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	0f 96       	adiw	r24, 0x0f	; 15
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24
    1a22:	86 e6       	ldi	r24, 0x66	; 102
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	93 83       	std	Z+3, r25	; 0x03
    1a28:	82 83       	std	Z+2, r24	; 0x02
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	95 83       	std	Z+5, r25	; 0x05
    1a30:	84 83       	std	Z+4, r24	; 0x04
    1a32:	8f 81       	ldd	r24, Y+7	; 0x07
    1a34:	98 85       	ldd	r25, Y+8	; 0x08
    1a36:	97 83       	std	Z+7, r25	; 0x07
    1a38:	86 83       	std	Z+6, r24	; 0x06
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	91 87       	std	Z+9, r25	; 0x09
    1a40:	80 87       	std	Z+8, r24	; 0x08
    1a42:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <sprintf>
    1a46:	8d b7       	in	r24, 0x3d	; 61
    1a48:	9e b7       	in	r25, 0x3e	; 62
    1a4a:	0a 96       	adiw	r24, 0x0a	; 10
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	9e bf       	out	0x3e, r25	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	8d bf       	out	0x3d, r24	; 61
	LCD_WRITE_STRING(str);
    1a56:	ce 01       	movw	r24, r28
    1a58:	0f 96       	adiw	r24, 0x0f	; 15
    1a5a:	0e 94 09 0c 	call	0x1812	; 0x1812 <LCD_WRITE_STRING>
}
    1a5e:	a8 96       	adiw	r28, 0x28	; 40
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <main>:

#define F_CPU 8000000UL
	unsigned char x='p';

int main()
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62

	LCD_INIT();
    1a78:	0e 94 93 09 	call	0x1326	; 0x1326 <LCD_INIT>
	UART_Init();
    1a7c:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_Init>
//	LCD_WRITE_STRING("Ezz ");


	while (1)
	{
		UART_Send('1');
    1a80:	81 e3       	ldi	r24, 0x31	; 49
    1a82:	0e 94 68 06 	call	0xcd0	; 0xcd0 <UART_Send>
		LCD_WRITE_CHAR('1');
    1a86:	81 e3       	ldi	r24, 0x31	; 49
    1a88:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_WRITE_CHAR>
		x = UART_Receive();
    1a8c:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Receive>
    1a90:	80 93 88 01 	sts	0x0188, r24
		LCD_WRITE_CHAR(x);
    1a94:	80 91 88 01 	lds	r24, 0x0188
    1a98:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_WRITE_CHAR>
    1a9c:	f1 cf       	rjmp	.-30     	; 0x1a80 <main+0x10>

00001a9e <__prologue_saves__>:
    1a9e:	2f 92       	push	r2
    1aa0:	3f 92       	push	r3
    1aa2:	4f 92       	push	r4
    1aa4:	5f 92       	push	r5
    1aa6:	6f 92       	push	r6
    1aa8:	7f 92       	push	r7
    1aaa:	8f 92       	push	r8
    1aac:	9f 92       	push	r9
    1aae:	af 92       	push	r10
    1ab0:	bf 92       	push	r11
    1ab2:	cf 92       	push	r12
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	ca 1b       	sub	r28, r26
    1ac8:	db 0b       	sbc	r29, r27
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	09 94       	ijmp

00001ad6 <__epilogue_restores__>:
    1ad6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ad8:	39 88       	ldd	r3, Y+17	; 0x11
    1ada:	48 88       	ldd	r4, Y+16	; 0x10
    1adc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ade:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ae0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ae2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ae4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ae6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ae8:	b9 84       	ldd	r11, Y+9	; 0x09
    1aea:	c8 84       	ldd	r12, Y+8	; 0x08
    1aec:	df 80       	ldd	r13, Y+7	; 0x07
    1aee:	ee 80       	ldd	r14, Y+6	; 0x06
    1af0:	fd 80       	ldd	r15, Y+5	; 0x05
    1af2:	0c 81       	ldd	r16, Y+4	; 0x04
    1af4:	1b 81       	ldd	r17, Y+3	; 0x03
    1af6:	aa 81       	ldd	r26, Y+2	; 0x02
    1af8:	b9 81       	ldd	r27, Y+1	; 0x01
    1afa:	ce 0f       	add	r28, r30
    1afc:	d1 1d       	adc	r29, r1
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	ed 01       	movw	r28, r26
    1b0a:	08 95       	ret

00001b0c <sprintf>:
    1b0c:	ae e0       	ldi	r26, 0x0E	; 14
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	ec e8       	ldi	r30, 0x8C	; 140
    1b12:	fd e0       	ldi	r31, 0x0D	; 13
    1b14:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__prologue_saves__+0x1c>
    1b18:	0d 89       	ldd	r16, Y+21	; 0x15
    1b1a:	1e 89       	ldd	r17, Y+22	; 0x16
    1b1c:	86 e0       	ldi	r24, 0x06	; 6
    1b1e:	8c 83       	std	Y+4, r24	; 0x04
    1b20:	1a 83       	std	Y+2, r17	; 0x02
    1b22:	09 83       	std	Y+1, r16	; 0x01
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	9f e7       	ldi	r25, 0x7F	; 127
    1b28:	9e 83       	std	Y+6, r25	; 0x06
    1b2a:	8d 83       	std	Y+5, r24	; 0x05
    1b2c:	9e 01       	movw	r18, r28
    1b2e:	27 5e       	subi	r18, 0xE7	; 231
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	6f 89       	ldd	r22, Y+23	; 0x17
    1b38:	78 8d       	ldd	r23, Y+24	; 0x18
    1b3a:	a9 01       	movw	r20, r18
    1b3c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <vfprintf>
    1b40:	2f 81       	ldd	r18, Y+7	; 0x07
    1b42:	38 85       	ldd	r19, Y+8	; 0x08
    1b44:	02 0f       	add	r16, r18
    1b46:	13 1f       	adc	r17, r19
    1b48:	f8 01       	movw	r30, r16
    1b4a:	10 82       	st	Z, r1
    1b4c:	2e 96       	adiw	r28, 0x0e	; 14
    1b4e:	e4 e0       	ldi	r30, 0x04	; 4
    1b50:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__epilogue_restores__+0x1c>

00001b54 <vfprintf>:
    1b54:	ab e0       	ldi	r26, 0x0B	; 11
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e0 eb       	ldi	r30, 0xB0	; 176
    1b5a:	fd e0       	ldi	r31, 0x0D	; 13
    1b5c:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__>
    1b60:	3c 01       	movw	r6, r24
    1b62:	2b 01       	movw	r4, r22
    1b64:	5a 01       	movw	r10, r20
    1b66:	fc 01       	movw	r30, r24
    1b68:	17 82       	std	Z+7, r1	; 0x07
    1b6a:	16 82       	std	Z+6, r1	; 0x06
    1b6c:	83 81       	ldd	r24, Z+3	; 0x03
    1b6e:	81 fd       	sbrc	r24, 1
    1b70:	03 c0       	rjmp	.+6      	; 0x1b78 <vfprintf+0x24>
    1b72:	6f ef       	ldi	r22, 0xFF	; 255
    1b74:	7f ef       	ldi	r23, 0xFF	; 255
    1b76:	c6 c1       	rjmp	.+908    	; 0x1f04 <vfprintf+0x3b0>
    1b78:	9a e0       	ldi	r25, 0x0A	; 10
    1b7a:	89 2e       	mov	r8, r25
    1b7c:	1e 01       	movw	r2, r28
    1b7e:	08 94       	sec
    1b80:	21 1c       	adc	r2, r1
    1b82:	31 1c       	adc	r3, r1
    1b84:	f3 01       	movw	r30, r6
    1b86:	23 81       	ldd	r18, Z+3	; 0x03
    1b88:	f2 01       	movw	r30, r4
    1b8a:	23 fd       	sbrc	r18, 3
    1b8c:	85 91       	lpm	r24, Z+
    1b8e:	23 ff       	sbrs	r18, 3
    1b90:	81 91       	ld	r24, Z+
    1b92:	2f 01       	movw	r4, r30
    1b94:	88 23       	and	r24, r24
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <vfprintf+0x46>
    1b98:	b2 c1       	rjmp	.+868    	; 0x1efe <vfprintf+0x3aa>
    1b9a:	85 32       	cpi	r24, 0x25	; 37
    1b9c:	39 f4       	brne	.+14     	; 0x1bac <vfprintf+0x58>
    1b9e:	23 fd       	sbrc	r18, 3
    1ba0:	85 91       	lpm	r24, Z+
    1ba2:	23 ff       	sbrs	r18, 3
    1ba4:	81 91       	ld	r24, Z+
    1ba6:	2f 01       	movw	r4, r30
    1ba8:	85 32       	cpi	r24, 0x25	; 37
    1baa:	29 f4       	brne	.+10     	; 0x1bb6 <vfprintf+0x62>
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	b3 01       	movw	r22, r6
    1bb0:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1bb4:	e7 cf       	rjmp	.-50     	; 0x1b84 <vfprintf+0x30>
    1bb6:	98 2f       	mov	r25, r24
    1bb8:	ff 24       	eor	r15, r15
    1bba:	ee 24       	eor	r14, r14
    1bbc:	99 24       	eor	r9, r9
    1bbe:	ff e1       	ldi	r31, 0x1F	; 31
    1bc0:	ff 15       	cp	r31, r15
    1bc2:	d0 f0       	brcs	.+52     	; 0x1bf8 <vfprintf+0xa4>
    1bc4:	9b 32       	cpi	r25, 0x2B	; 43
    1bc6:	69 f0       	breq	.+26     	; 0x1be2 <vfprintf+0x8e>
    1bc8:	9c 32       	cpi	r25, 0x2C	; 44
    1bca:	28 f4       	brcc	.+10     	; 0x1bd6 <vfprintf+0x82>
    1bcc:	90 32       	cpi	r25, 0x20	; 32
    1bce:	59 f0       	breq	.+22     	; 0x1be6 <vfprintf+0x92>
    1bd0:	93 32       	cpi	r25, 0x23	; 35
    1bd2:	91 f4       	brne	.+36     	; 0x1bf8 <vfprintf+0xa4>
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <vfprintf+0x9e>
    1bd6:	9d 32       	cpi	r25, 0x2D	; 45
    1bd8:	49 f0       	breq	.+18     	; 0x1bec <vfprintf+0x98>
    1bda:	90 33       	cpi	r25, 0x30	; 48
    1bdc:	69 f4       	brne	.+26     	; 0x1bf8 <vfprintf+0xa4>
    1bde:	41 e0       	ldi	r20, 0x01	; 1
    1be0:	24 c0       	rjmp	.+72     	; 0x1c2a <vfprintf+0xd6>
    1be2:	52 e0       	ldi	r21, 0x02	; 2
    1be4:	f5 2a       	or	r15, r21
    1be6:	84 e0       	ldi	r24, 0x04	; 4
    1be8:	f8 2a       	or	r15, r24
    1bea:	28 c0       	rjmp	.+80     	; 0x1c3c <vfprintf+0xe8>
    1bec:	98 e0       	ldi	r25, 0x08	; 8
    1bee:	f9 2a       	or	r15, r25
    1bf0:	25 c0       	rjmp	.+74     	; 0x1c3c <vfprintf+0xe8>
    1bf2:	e0 e1       	ldi	r30, 0x10	; 16
    1bf4:	fe 2a       	or	r15, r30
    1bf6:	22 c0       	rjmp	.+68     	; 0x1c3c <vfprintf+0xe8>
    1bf8:	f7 fc       	sbrc	r15, 7
    1bfa:	29 c0       	rjmp	.+82     	; 0x1c4e <vfprintf+0xfa>
    1bfc:	89 2f       	mov	r24, r25
    1bfe:	80 53       	subi	r24, 0x30	; 48
    1c00:	8a 30       	cpi	r24, 0x0A	; 10
    1c02:	70 f4       	brcc	.+28     	; 0x1c20 <vfprintf+0xcc>
    1c04:	f6 fe       	sbrs	r15, 6
    1c06:	05 c0       	rjmp	.+10     	; 0x1c12 <vfprintf+0xbe>
    1c08:	98 9c       	mul	r9, r8
    1c0a:	90 2c       	mov	r9, r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	98 0e       	add	r9, r24
    1c10:	15 c0       	rjmp	.+42     	; 0x1c3c <vfprintf+0xe8>
    1c12:	e8 9c       	mul	r14, r8
    1c14:	e0 2c       	mov	r14, r0
    1c16:	11 24       	eor	r1, r1
    1c18:	e8 0e       	add	r14, r24
    1c1a:	f0 e2       	ldi	r31, 0x20	; 32
    1c1c:	ff 2a       	or	r15, r31
    1c1e:	0e c0       	rjmp	.+28     	; 0x1c3c <vfprintf+0xe8>
    1c20:	9e 32       	cpi	r25, 0x2E	; 46
    1c22:	29 f4       	brne	.+10     	; 0x1c2e <vfprintf+0xda>
    1c24:	f6 fc       	sbrc	r15, 6
    1c26:	6b c1       	rjmp	.+726    	; 0x1efe <vfprintf+0x3aa>
    1c28:	40 e4       	ldi	r20, 0x40	; 64
    1c2a:	f4 2a       	or	r15, r20
    1c2c:	07 c0       	rjmp	.+14     	; 0x1c3c <vfprintf+0xe8>
    1c2e:	9c 36       	cpi	r25, 0x6C	; 108
    1c30:	19 f4       	brne	.+6      	; 0x1c38 <vfprintf+0xe4>
    1c32:	50 e8       	ldi	r21, 0x80	; 128
    1c34:	f5 2a       	or	r15, r21
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <vfprintf+0xe8>
    1c38:	98 36       	cpi	r25, 0x68	; 104
    1c3a:	49 f4       	brne	.+18     	; 0x1c4e <vfprintf+0xfa>
    1c3c:	f2 01       	movw	r30, r4
    1c3e:	23 fd       	sbrc	r18, 3
    1c40:	95 91       	lpm	r25, Z+
    1c42:	23 ff       	sbrs	r18, 3
    1c44:	91 91       	ld	r25, Z+
    1c46:	2f 01       	movw	r4, r30
    1c48:	99 23       	and	r25, r25
    1c4a:	09 f0       	breq	.+2      	; 0x1c4e <vfprintf+0xfa>
    1c4c:	b8 cf       	rjmp	.-144    	; 0x1bbe <vfprintf+0x6a>
    1c4e:	89 2f       	mov	r24, r25
    1c50:	85 54       	subi	r24, 0x45	; 69
    1c52:	83 30       	cpi	r24, 0x03	; 3
    1c54:	18 f0       	brcs	.+6      	; 0x1c5c <vfprintf+0x108>
    1c56:	80 52       	subi	r24, 0x20	; 32
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	38 f4       	brcc	.+14     	; 0x1c6a <vfprintf+0x116>
    1c5c:	44 e0       	ldi	r20, 0x04	; 4
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	a4 0e       	add	r10, r20
    1c62:	b5 1e       	adc	r11, r21
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	59 83       	std	Y+1, r21	; 0x01
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <vfprintf+0x134>
    1c6a:	93 36       	cpi	r25, 0x63	; 99
    1c6c:	31 f0       	breq	.+12     	; 0x1c7a <vfprintf+0x126>
    1c6e:	93 37       	cpi	r25, 0x73	; 115
    1c70:	79 f0       	breq	.+30     	; 0x1c90 <vfprintf+0x13c>
    1c72:	93 35       	cpi	r25, 0x53	; 83
    1c74:	09 f0       	breq	.+2      	; 0x1c78 <vfprintf+0x124>
    1c76:	56 c0       	rjmp	.+172    	; 0x1d24 <vfprintf+0x1d0>
    1c78:	20 c0       	rjmp	.+64     	; 0x1cba <vfprintf+0x166>
    1c7a:	f5 01       	movw	r30, r10
    1c7c:	80 81       	ld	r24, Z
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	42 e0       	ldi	r20, 0x02	; 2
    1c82:	50 e0       	ldi	r21, 0x00	; 0
    1c84:	a4 0e       	add	r10, r20
    1c86:	b5 1e       	adc	r11, r21
    1c88:	61 01       	movw	r12, r2
    1c8a:	01 e0       	ldi	r16, 0x01	; 1
    1c8c:	10 e0       	ldi	r17, 0x00	; 0
    1c8e:	12 c0       	rjmp	.+36     	; 0x1cb4 <vfprintf+0x160>
    1c90:	f5 01       	movw	r30, r10
    1c92:	c0 80       	ld	r12, Z
    1c94:	d1 80       	ldd	r13, Z+1	; 0x01
    1c96:	f6 fc       	sbrc	r15, 6
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <vfprintf+0x14c>
    1c9a:	6f ef       	ldi	r22, 0xFF	; 255
    1c9c:	7f ef       	ldi	r23, 0xFF	; 255
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <vfprintf+0x150>
    1ca0:	69 2d       	mov	r22, r9
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	42 e0       	ldi	r20, 0x02	; 2
    1ca6:	50 e0       	ldi	r21, 0x00	; 0
    1ca8:	a4 0e       	add	r10, r20
    1caa:	b5 1e       	adc	r11, r21
    1cac:	c6 01       	movw	r24, r12
    1cae:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <strnlen>
    1cb2:	8c 01       	movw	r16, r24
    1cb4:	5f e7       	ldi	r21, 0x7F	; 127
    1cb6:	f5 22       	and	r15, r21
    1cb8:	14 c0       	rjmp	.+40     	; 0x1ce2 <vfprintf+0x18e>
    1cba:	f5 01       	movw	r30, r10
    1cbc:	c0 80       	ld	r12, Z
    1cbe:	d1 80       	ldd	r13, Z+1	; 0x01
    1cc0:	f6 fc       	sbrc	r15, 6
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <vfprintf+0x176>
    1cc4:	6f ef       	ldi	r22, 0xFF	; 255
    1cc6:	7f ef       	ldi	r23, 0xFF	; 255
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x17a>
    1cca:	69 2d       	mov	r22, r9
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	42 e0       	ldi	r20, 0x02	; 2
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	a4 0e       	add	r10, r20
    1cd4:	b5 1e       	adc	r11, r21
    1cd6:	c6 01       	movw	r24, r12
    1cd8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <strnlen_P>
    1cdc:	8c 01       	movw	r16, r24
    1cde:	50 e8       	ldi	r21, 0x80	; 128
    1ce0:	f5 2a       	or	r15, r21
    1ce2:	f3 fe       	sbrs	r15, 3
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <vfprintf+0x1a0>
    1ce6:	1a c0       	rjmp	.+52     	; 0x1d1c <vfprintf+0x1c8>
    1ce8:	80 e2       	ldi	r24, 0x20	; 32
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	b3 01       	movw	r22, r6
    1cee:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1cf2:	ea 94       	dec	r14
    1cf4:	8e 2d       	mov	r24, r14
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	08 17       	cp	r16, r24
    1cfa:	19 07       	cpc	r17, r25
    1cfc:	a8 f3       	brcs	.-22     	; 0x1ce8 <vfprintf+0x194>
    1cfe:	0e c0       	rjmp	.+28     	; 0x1d1c <vfprintf+0x1c8>
    1d00:	f6 01       	movw	r30, r12
    1d02:	f7 fc       	sbrc	r15, 7
    1d04:	85 91       	lpm	r24, Z+
    1d06:	f7 fe       	sbrs	r15, 7
    1d08:	81 91       	ld	r24, Z+
    1d0a:	6f 01       	movw	r12, r30
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	b3 01       	movw	r22, r6
    1d10:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1d14:	e1 10       	cpse	r14, r1
    1d16:	ea 94       	dec	r14
    1d18:	01 50       	subi	r16, 0x01	; 1
    1d1a:	10 40       	sbci	r17, 0x00	; 0
    1d1c:	01 15       	cp	r16, r1
    1d1e:	11 05       	cpc	r17, r1
    1d20:	79 f7       	brne	.-34     	; 0x1d00 <vfprintf+0x1ac>
    1d22:	ea c0       	rjmp	.+468    	; 0x1ef8 <vfprintf+0x3a4>
    1d24:	94 36       	cpi	r25, 0x64	; 100
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <vfprintf+0x1d8>
    1d28:	99 36       	cpi	r25, 0x69	; 105
    1d2a:	69 f5       	brne	.+90     	; 0x1d86 <vfprintf+0x232>
    1d2c:	f7 fe       	sbrs	r15, 7
    1d2e:	08 c0       	rjmp	.+16     	; 0x1d40 <vfprintf+0x1ec>
    1d30:	f5 01       	movw	r30, r10
    1d32:	20 81       	ld	r18, Z
    1d34:	31 81       	ldd	r19, Z+1	; 0x01
    1d36:	42 81       	ldd	r20, Z+2	; 0x02
    1d38:	53 81       	ldd	r21, Z+3	; 0x03
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0a c0       	rjmp	.+20     	; 0x1d54 <vfprintf+0x200>
    1d40:	f5 01       	movw	r30, r10
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	9c 01       	movw	r18, r24
    1d48:	44 27       	eor	r20, r20
    1d4a:	37 fd       	sbrc	r19, 7
    1d4c:	40 95       	com	r20
    1d4e:	54 2f       	mov	r21, r20
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	a8 0e       	add	r10, r24
    1d56:	b9 1e       	adc	r11, r25
    1d58:	9f e6       	ldi	r25, 0x6F	; 111
    1d5a:	f9 22       	and	r15, r25
    1d5c:	57 ff       	sbrs	r21, 7
    1d5e:	09 c0       	rjmp	.+18     	; 0x1d72 <vfprintf+0x21e>
    1d60:	50 95       	com	r21
    1d62:	40 95       	com	r20
    1d64:	30 95       	com	r19
    1d66:	21 95       	neg	r18
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6e:	e0 e8       	ldi	r30, 0x80	; 128
    1d70:	fe 2a       	or	r15, r30
    1d72:	ca 01       	movw	r24, r20
    1d74:	b9 01       	movw	r22, r18
    1d76:	a1 01       	movw	r20, r2
    1d78:	2a e0       	ldi	r18, 0x0A	; 10
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__ultoa_invert>
    1d80:	d8 2e       	mov	r13, r24
    1d82:	d2 18       	sub	r13, r2
    1d84:	40 c0       	rjmp	.+128    	; 0x1e06 <vfprintf+0x2b2>
    1d86:	95 37       	cpi	r25, 0x75	; 117
    1d88:	29 f4       	brne	.+10     	; 0x1d94 <vfprintf+0x240>
    1d8a:	1f 2d       	mov	r17, r15
    1d8c:	1f 7e       	andi	r17, 0xEF	; 239
    1d8e:	2a e0       	ldi	r18, 0x0A	; 10
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	1d c0       	rjmp	.+58     	; 0x1dce <vfprintf+0x27a>
    1d94:	1f 2d       	mov	r17, r15
    1d96:	19 7f       	andi	r17, 0xF9	; 249
    1d98:	9f 36       	cpi	r25, 0x6F	; 111
    1d9a:	61 f0       	breq	.+24     	; 0x1db4 <vfprintf+0x260>
    1d9c:	90 37       	cpi	r25, 0x70	; 112
    1d9e:	20 f4       	brcc	.+8      	; 0x1da8 <vfprintf+0x254>
    1da0:	98 35       	cpi	r25, 0x58	; 88
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <vfprintf+0x252>
    1da4:	ac c0       	rjmp	.+344    	; 0x1efe <vfprintf+0x3aa>
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <vfprintf+0x272>
    1da8:	90 37       	cpi	r25, 0x70	; 112
    1daa:	39 f0       	breq	.+14     	; 0x1dba <vfprintf+0x266>
    1dac:	98 37       	cpi	r25, 0x78	; 120
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <vfprintf+0x25e>
    1db0:	a6 c0       	rjmp	.+332    	; 0x1efe <vfprintf+0x3aa>
    1db2:	04 c0       	rjmp	.+8      	; 0x1dbc <vfprintf+0x268>
    1db4:	28 e0       	ldi	r18, 0x08	; 8
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	0a c0       	rjmp	.+20     	; 0x1dce <vfprintf+0x27a>
    1dba:	10 61       	ori	r17, 0x10	; 16
    1dbc:	14 fd       	sbrc	r17, 4
    1dbe:	14 60       	ori	r17, 0x04	; 4
    1dc0:	20 e1       	ldi	r18, 0x10	; 16
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	04 c0       	rjmp	.+8      	; 0x1dce <vfprintf+0x27a>
    1dc6:	14 fd       	sbrc	r17, 4
    1dc8:	16 60       	ori	r17, 0x06	; 6
    1dca:	20 e1       	ldi	r18, 0x10	; 16
    1dcc:	32 e0       	ldi	r19, 0x02	; 2
    1dce:	17 ff       	sbrs	r17, 7
    1dd0:	08 c0       	rjmp	.+16     	; 0x1de2 <vfprintf+0x28e>
    1dd2:	f5 01       	movw	r30, r10
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	44 e0       	ldi	r20, 0x04	; 4
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	08 c0       	rjmp	.+16     	; 0x1df2 <vfprintf+0x29e>
    1de2:	f5 01       	movw	r30, r10
    1de4:	80 81       	ld	r24, Z
    1de6:	91 81       	ldd	r25, Z+1	; 0x01
    1de8:	bc 01       	movw	r22, r24
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	42 e0       	ldi	r20, 0x02	; 2
    1df0:	50 e0       	ldi	r21, 0x00	; 0
    1df2:	a4 0e       	add	r10, r20
    1df4:	b5 1e       	adc	r11, r21
    1df6:	a1 01       	movw	r20, r2
    1df8:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__ultoa_invert>
    1dfc:	d8 2e       	mov	r13, r24
    1dfe:	d2 18       	sub	r13, r2
    1e00:	8f e7       	ldi	r24, 0x7F	; 127
    1e02:	f8 2e       	mov	r15, r24
    1e04:	f1 22       	and	r15, r17
    1e06:	f6 fe       	sbrs	r15, 6
    1e08:	0b c0       	rjmp	.+22     	; 0x1e20 <vfprintf+0x2cc>
    1e0a:	5e ef       	ldi	r21, 0xFE	; 254
    1e0c:	f5 22       	and	r15, r21
    1e0e:	d9 14       	cp	r13, r9
    1e10:	38 f4       	brcc	.+14     	; 0x1e20 <vfprintf+0x2cc>
    1e12:	f4 fe       	sbrs	r15, 4
    1e14:	07 c0       	rjmp	.+14     	; 0x1e24 <vfprintf+0x2d0>
    1e16:	f2 fc       	sbrc	r15, 2
    1e18:	05 c0       	rjmp	.+10     	; 0x1e24 <vfprintf+0x2d0>
    1e1a:	8f ee       	ldi	r24, 0xEF	; 239
    1e1c:	f8 22       	and	r15, r24
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <vfprintf+0x2d0>
    1e20:	1d 2d       	mov	r17, r13
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <vfprintf+0x2d2>
    1e24:	19 2d       	mov	r17, r9
    1e26:	f4 fe       	sbrs	r15, 4
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <vfprintf+0x2f0>
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ed 0d       	add	r30, r13
    1e2e:	f1 1d       	adc	r31, r1
    1e30:	80 81       	ld	r24, Z
    1e32:	80 33       	cpi	r24, 0x30	; 48
    1e34:	19 f4       	brne	.+6      	; 0x1e3c <vfprintf+0x2e8>
    1e36:	99 ee       	ldi	r25, 0xE9	; 233
    1e38:	f9 22       	and	r15, r25
    1e3a:	08 c0       	rjmp	.+16     	; 0x1e4c <vfprintf+0x2f8>
    1e3c:	1f 5f       	subi	r17, 0xFF	; 255
    1e3e:	f2 fe       	sbrs	r15, 2
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <vfprintf+0x2f8>
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <vfprintf+0x2f6>
    1e44:	8f 2d       	mov	r24, r15
    1e46:	86 78       	andi	r24, 0x86	; 134
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <vfprintf+0x2f8>
    1e4a:	1f 5f       	subi	r17, 0xFF	; 255
    1e4c:	0f 2d       	mov	r16, r15
    1e4e:	f3 fc       	sbrc	r15, 3
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <vfprintf+0x326>
    1e52:	f0 fe       	sbrs	r15, 0
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <vfprintf+0x320>
    1e56:	1e 15       	cp	r17, r14
    1e58:	10 f0       	brcs	.+4      	; 0x1e5e <vfprintf+0x30a>
    1e5a:	9d 2c       	mov	r9, r13
    1e5c:	0b c0       	rjmp	.+22     	; 0x1e74 <vfprintf+0x320>
    1e5e:	9d 2c       	mov	r9, r13
    1e60:	9e 0c       	add	r9, r14
    1e62:	91 1a       	sub	r9, r17
    1e64:	1e 2d       	mov	r17, r14
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <vfprintf+0x320>
    1e68:	80 e2       	ldi	r24, 0x20	; 32
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	b3 01       	movw	r22, r6
    1e6e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1e72:	1f 5f       	subi	r17, 0xFF	; 255
    1e74:	1e 15       	cp	r17, r14
    1e76:	c0 f3       	brcs	.-16     	; 0x1e68 <vfprintf+0x314>
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <vfprintf+0x32e>
    1e7a:	1e 15       	cp	r17, r14
    1e7c:	10 f4       	brcc	.+4      	; 0x1e82 <vfprintf+0x32e>
    1e7e:	e1 1a       	sub	r14, r17
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <vfprintf+0x330>
    1e82:	ee 24       	eor	r14, r14
    1e84:	04 ff       	sbrs	r16, 4
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <vfprintf+0x352>
    1e88:	80 e3       	ldi	r24, 0x30	; 48
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	b3 01       	movw	r22, r6
    1e8e:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1e92:	02 ff       	sbrs	r16, 2
    1e94:	1d c0       	rjmp	.+58     	; 0x1ed0 <vfprintf+0x37c>
    1e96:	01 fd       	sbrc	r16, 1
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <vfprintf+0x34c>
    1e9a:	88 e7       	ldi	r24, 0x78	; 120
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e c0       	rjmp	.+28     	; 0x1ebc <vfprintf+0x368>
    1ea0:	88 e5       	ldi	r24, 0x58	; 88
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0b c0       	rjmp	.+22     	; 0x1ebc <vfprintf+0x368>
    1ea6:	80 2f       	mov	r24, r16
    1ea8:	86 78       	andi	r24, 0x86	; 134
    1eaa:	91 f0       	breq	.+36     	; 0x1ed0 <vfprintf+0x37c>
    1eac:	01 ff       	sbrs	r16, 1
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <vfprintf+0x360>
    1eb0:	8b e2       	ldi	r24, 0x2B	; 43
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <vfprintf+0x362>
    1eb4:	80 e2       	ldi	r24, 0x20	; 32
    1eb6:	f7 fc       	sbrc	r15, 7
    1eb8:	8d e2       	ldi	r24, 0x2D	; 45
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	b3 01       	movw	r22, r6
    1ebe:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1ec2:	06 c0       	rjmp	.+12     	; 0x1ed0 <vfprintf+0x37c>
    1ec4:	80 e3       	ldi	r24, 0x30	; 48
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	b3 01       	movw	r22, r6
    1eca:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1ece:	9a 94       	dec	r9
    1ed0:	d9 14       	cp	r13, r9
    1ed2:	c0 f3       	brcs	.-16     	; 0x1ec4 <vfprintf+0x370>
    1ed4:	da 94       	dec	r13
    1ed6:	f1 01       	movw	r30, r2
    1ed8:	ed 0d       	add	r30, r13
    1eda:	f1 1d       	adc	r31, r1
    1edc:	80 81       	ld	r24, Z
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	b3 01       	movw	r22, r6
    1ee2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1ee6:	dd 20       	and	r13, r13
    1ee8:	a9 f7       	brne	.-22     	; 0x1ed4 <vfprintf+0x380>
    1eea:	06 c0       	rjmp	.+12     	; 0x1ef8 <vfprintf+0x3a4>
    1eec:	80 e2       	ldi	r24, 0x20	; 32
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	b3 01       	movw	r22, r6
    1ef2:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <fputc>
    1ef6:	ea 94       	dec	r14
    1ef8:	ee 20       	and	r14, r14
    1efa:	c1 f7       	brne	.-16     	; 0x1eec <vfprintf+0x398>
    1efc:	43 ce       	rjmp	.-890    	; 0x1b84 <vfprintf+0x30>
    1efe:	f3 01       	movw	r30, r6
    1f00:	66 81       	ldd	r22, Z+6	; 0x06
    1f02:	77 81       	ldd	r23, Z+7	; 0x07
    1f04:	cb 01       	movw	r24, r22
    1f06:	2b 96       	adiw	r28, 0x0b	; 11
    1f08:	e2 e1       	ldi	r30, 0x12	; 18
    1f0a:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__>

00001f0e <strnlen_P>:
    1f0e:	fc 01       	movw	r30, r24
    1f10:	05 90       	lpm	r0, Z+
    1f12:	61 50       	subi	r22, 0x01	; 1
    1f14:	70 40       	sbci	r23, 0x00	; 0
    1f16:	01 10       	cpse	r0, r1
    1f18:	d8 f7       	brcc	.-10     	; 0x1f10 <strnlen_P+0x2>
    1f1a:	80 95       	com	r24
    1f1c:	90 95       	com	r25
    1f1e:	8e 0f       	add	r24, r30
    1f20:	9f 1f       	adc	r25, r31
    1f22:	08 95       	ret

00001f24 <strnlen>:
    1f24:	fc 01       	movw	r30, r24
    1f26:	61 50       	subi	r22, 0x01	; 1
    1f28:	70 40       	sbci	r23, 0x00	; 0
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	01 10       	cpse	r0, r1
    1f2e:	d8 f7       	brcc	.-10     	; 0x1f26 <strnlen+0x2>
    1f30:	80 95       	com	r24
    1f32:	90 95       	com	r25
    1f34:	8e 0f       	add	r24, r30
    1f36:	9f 1f       	adc	r25, r31
    1f38:	08 95       	ret

00001f3a <fputc>:
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	8c 01       	movw	r16, r24
    1f44:	eb 01       	movw	r28, r22
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	81 ff       	sbrs	r24, 1
    1f4a:	1b c0       	rjmp	.+54     	; 0x1f82 <fputc+0x48>
    1f4c:	82 ff       	sbrs	r24, 2
    1f4e:	0d c0       	rjmp	.+26     	; 0x1f6a <fputc+0x30>
    1f50:	2e 81       	ldd	r18, Y+6	; 0x06
    1f52:	3f 81       	ldd	r19, Y+7	; 0x07
    1f54:	8c 81       	ldd	r24, Y+4	; 0x04
    1f56:	9d 81       	ldd	r25, Y+5	; 0x05
    1f58:	28 17       	cp	r18, r24
    1f5a:	39 07       	cpc	r19, r25
    1f5c:	64 f4       	brge	.+24     	; 0x1f76 <fputc+0x3c>
    1f5e:	e8 81       	ld	r30, Y
    1f60:	f9 81       	ldd	r31, Y+1	; 0x01
    1f62:	01 93       	st	Z+, r16
    1f64:	f9 83       	std	Y+1, r31	; 0x01
    1f66:	e8 83       	st	Y, r30
    1f68:	06 c0       	rjmp	.+12     	; 0x1f76 <fputc+0x3c>
    1f6a:	e8 85       	ldd	r30, Y+8	; 0x08
    1f6c:	f9 85       	ldd	r31, Y+9	; 0x09
    1f6e:	80 2f       	mov	r24, r16
    1f70:	09 95       	icall
    1f72:	89 2b       	or	r24, r25
    1f74:	31 f4       	brne	.+12     	; 0x1f82 <fputc+0x48>
    1f76:	8e 81       	ldd	r24, Y+6	; 0x06
    1f78:	9f 81       	ldd	r25, Y+7	; 0x07
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	9f 83       	std	Y+7, r25	; 0x07
    1f7e:	8e 83       	std	Y+6, r24	; 0x06
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <fputc+0x4c>
    1f82:	0f ef       	ldi	r16, 0xFF	; 255
    1f84:	1f ef       	ldi	r17, 0xFF	; 255
    1f86:	c8 01       	movw	r24, r16
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	08 95       	ret

00001f92 <__ultoa_invert>:
    1f92:	fa 01       	movw	r30, r20
    1f94:	aa 27       	eor	r26, r26
    1f96:	28 30       	cpi	r18, 0x08	; 8
    1f98:	51 f1       	breq	.+84     	; 0x1fee <__ultoa_invert+0x5c>
    1f9a:	20 31       	cpi	r18, 0x10	; 16
    1f9c:	81 f1       	breq	.+96     	; 0x1ffe <__ultoa_invert+0x6c>
    1f9e:	e8 94       	clt
    1fa0:	6f 93       	push	r22
    1fa2:	6e 7f       	andi	r22, 0xFE	; 254
    1fa4:	6e 5f       	subi	r22, 0xFE	; 254
    1fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1faa:	9f 4f       	sbci	r25, 0xFF	; 255
    1fac:	af 4f       	sbci	r26, 0xFF	; 255
    1fae:	b1 e0       	ldi	r27, 0x01	; 1
    1fb0:	3e d0       	rcall	.+124    	; 0x202e <__ultoa_invert+0x9c>
    1fb2:	b4 e0       	ldi	r27, 0x04	; 4
    1fb4:	3c d0       	rcall	.+120    	; 0x202e <__ultoa_invert+0x9c>
    1fb6:	67 0f       	add	r22, r23
    1fb8:	78 1f       	adc	r23, r24
    1fba:	89 1f       	adc	r24, r25
    1fbc:	9a 1f       	adc	r25, r26
    1fbe:	a1 1d       	adc	r26, r1
    1fc0:	68 0f       	add	r22, r24
    1fc2:	79 1f       	adc	r23, r25
    1fc4:	8a 1f       	adc	r24, r26
    1fc6:	91 1d       	adc	r25, r1
    1fc8:	a1 1d       	adc	r26, r1
    1fca:	6a 0f       	add	r22, r26
    1fcc:	71 1d       	adc	r23, r1
    1fce:	81 1d       	adc	r24, r1
    1fd0:	91 1d       	adc	r25, r1
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	20 d0       	rcall	.+64     	; 0x2016 <__ultoa_invert+0x84>
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <__ultoa_invert+0x48>
    1fd8:	68 94       	set
    1fda:	3f 91       	pop	r19
    1fdc:	2a e0       	ldi	r18, 0x0A	; 10
    1fde:	26 9f       	mul	r18, r22
    1fe0:	11 24       	eor	r1, r1
    1fe2:	30 19       	sub	r19, r0
    1fe4:	30 5d       	subi	r19, 0xD0	; 208
    1fe6:	31 93       	st	Z+, r19
    1fe8:	de f6       	brtc	.-74     	; 0x1fa0 <__ultoa_invert+0xe>
    1fea:	cf 01       	movw	r24, r30
    1fec:	08 95       	ret
    1fee:	46 2f       	mov	r20, r22
    1ff0:	47 70       	andi	r20, 0x07	; 7
    1ff2:	40 5d       	subi	r20, 0xD0	; 208
    1ff4:	41 93       	st	Z+, r20
    1ff6:	b3 e0       	ldi	r27, 0x03	; 3
    1ff8:	0f d0       	rcall	.+30     	; 0x2018 <__ultoa_invert+0x86>
    1ffa:	c9 f7       	brne	.-14     	; 0x1fee <__ultoa_invert+0x5c>
    1ffc:	f6 cf       	rjmp	.-20     	; 0x1fea <__ultoa_invert+0x58>
    1ffe:	46 2f       	mov	r20, r22
    2000:	4f 70       	andi	r20, 0x0F	; 15
    2002:	40 5d       	subi	r20, 0xD0	; 208
    2004:	4a 33       	cpi	r20, 0x3A	; 58
    2006:	18 f0       	brcs	.+6      	; 0x200e <__ultoa_invert+0x7c>
    2008:	49 5d       	subi	r20, 0xD9	; 217
    200a:	31 fd       	sbrc	r19, 1
    200c:	40 52       	subi	r20, 0x20	; 32
    200e:	41 93       	st	Z+, r20
    2010:	02 d0       	rcall	.+4      	; 0x2016 <__ultoa_invert+0x84>
    2012:	a9 f7       	brne	.-22     	; 0x1ffe <__ultoa_invert+0x6c>
    2014:	ea cf       	rjmp	.-44     	; 0x1fea <__ultoa_invert+0x58>
    2016:	b4 e0       	ldi	r27, 0x04	; 4
    2018:	a6 95       	lsr	r26
    201a:	97 95       	ror	r25
    201c:	87 95       	ror	r24
    201e:	77 95       	ror	r23
    2020:	67 95       	ror	r22
    2022:	ba 95       	dec	r27
    2024:	c9 f7       	brne	.-14     	; 0x2018 <__ultoa_invert+0x86>
    2026:	00 97       	sbiw	r24, 0x00	; 0
    2028:	61 05       	cpc	r22, r1
    202a:	71 05       	cpc	r23, r1
    202c:	08 95       	ret
    202e:	9b 01       	movw	r18, r22
    2030:	ac 01       	movw	r20, r24
    2032:	0a 2e       	mov	r0, r26
    2034:	06 94       	lsr	r0
    2036:	57 95       	ror	r21
    2038:	47 95       	ror	r20
    203a:	37 95       	ror	r19
    203c:	27 95       	ror	r18
    203e:	ba 95       	dec	r27
    2040:	c9 f7       	brne	.-14     	; 0x2034 <__ultoa_invert+0xa2>
    2042:	62 0f       	add	r22, r18
    2044:	73 1f       	adc	r23, r19
    2046:	84 1f       	adc	r24, r20
    2048:	95 1f       	adc	r25, r21
    204a:	a0 1d       	adc	r26, r0
    204c:	08 95       	ret

0000204e <_exit>:
    204e:	f8 94       	cli

00002050 <__stop_program>:
    2050:	ff cf       	rjmp	.-2      	; 0x2050 <__stop_program>
