
drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c60  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000d90  08000d90  00010d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000db8  08000db8  00010dc0  2**0
                  CONTENTS
  4 .ARM          00000000  08000db8  08000db8  00010dc0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000db8  08000dc0  00010dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000db8  08000db8  00010db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000dc0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000dc0  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dc0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033bc  00000000  00000000  00010de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000086e  00000000  00000000  000141a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a1c  00000000  00000000  00014a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  00015430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  000155e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000009b3  00000000  00000000  00015748  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001ab3  00000000  00000000  000160fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009447  00000000  00000000  00017bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00020ff5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000560  00000000  00000000  00021070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d78 	.word	0x08000d78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d78 	.word	0x08000d78

08000170 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
			;
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_lcd_kick>:

void LCD_lcd_kick()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <LCD_lcd_kick+0x28>)
 80001b4:	f000 fac7 	bl	8000746 <MCAL_GPIO_WritePin>
	delay_ms(50);
 80001b8:	2032      	movs	r0, #50	; 0x32
 80001ba:	f7ff ffd9 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c4:	4802      	ldr	r0, [pc, #8]	; (80001d0 <LCD_lcd_kick+0x28>)
 80001c6:	f000 fabe 	bl	8000746 <MCAL_GPIO_WritePin>
}
 80001ca:	bf00      	nop
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010800 	.word	0x40010800

080001d4 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80001d8:	4b52      	ldr	r3, [pc, #328]	; (8000324 <LCD_GPIO_init+0x150>)
 80001da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001de:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e0:	4b50      	ldr	r3, [pc, #320]	; (8000324 <LCD_GPIO_init+0x150>)
 80001e2:	2204      	movs	r2, #4
 80001e4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80001e6:	4b4f      	ldr	r3, [pc, #316]	; (8000324 <LCD_GPIO_init+0x150>)
 80001e8:	2201      	movs	r2, #1
 80001ea:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80001ec:	494d      	ldr	r1, [pc, #308]	; (8000324 <LCD_GPIO_init+0x150>)
 80001ee:	484e      	ldr	r0, [pc, #312]	; (8000328 <LCD_GPIO_init+0x154>)
 80001f0:	f000 fa2a 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80001f4:	4b4b      	ldr	r3, [pc, #300]	; (8000324 <LCD_GPIO_init+0x150>)
 80001f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80001fa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001fc:	4b49      	ldr	r3, [pc, #292]	; (8000324 <LCD_GPIO_init+0x150>)
 80001fe:	2204      	movs	r2, #4
 8000200:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000202:	4b48      	ldr	r3, [pc, #288]	; (8000324 <LCD_GPIO_init+0x150>)
 8000204:	2201      	movs	r2, #1
 8000206:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000208:	4946      	ldr	r1, [pc, #280]	; (8000324 <LCD_GPIO_init+0x150>)
 800020a:	4847      	ldr	r0, [pc, #284]	; (8000328 <LCD_GPIO_init+0x154>)
 800020c:	f000 fa1c 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000210:	4b44      	ldr	r3, [pc, #272]	; (8000324 <LCD_GPIO_init+0x150>)
 8000212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000216:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000218:	4b42      	ldr	r3, [pc, #264]	; (8000324 <LCD_GPIO_init+0x150>)
 800021a:	2204      	movs	r2, #4
 800021c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800021e:	4b41      	ldr	r3, [pc, #260]	; (8000324 <LCD_GPIO_init+0x150>)
 8000220:	2201      	movs	r2, #1
 8000222:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000224:	493f      	ldr	r1, [pc, #252]	; (8000324 <LCD_GPIO_init+0x150>)
 8000226:	4840      	ldr	r0, [pc, #256]	; (8000328 <LCD_GPIO_init+0x154>)
 8000228:	f000 fa0e 	bl	8000648 <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 800022c:	4b3d      	ldr	r3, [pc, #244]	; (8000324 <LCD_GPIO_init+0x150>)
 800022e:	2201      	movs	r2, #1
 8000230:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000232:	4b3c      	ldr	r3, [pc, #240]	; (8000324 <LCD_GPIO_init+0x150>)
 8000234:	2204      	movs	r2, #4
 8000236:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000238:	4b3a      	ldr	r3, [pc, #232]	; (8000324 <LCD_GPIO_init+0x150>)
 800023a:	2201      	movs	r2, #1
 800023c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800023e:	4939      	ldr	r1, [pc, #228]	; (8000324 <LCD_GPIO_init+0x150>)
 8000240:	4839      	ldr	r0, [pc, #228]	; (8000328 <LCD_GPIO_init+0x154>)
 8000242:	f000 fa01 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000246:	4b37      	ldr	r3, [pc, #220]	; (8000324 <LCD_GPIO_init+0x150>)
 8000248:	2202      	movs	r2, #2
 800024a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800024c:	4b35      	ldr	r3, [pc, #212]	; (8000324 <LCD_GPIO_init+0x150>)
 800024e:	2204      	movs	r2, #4
 8000250:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000252:	4b34      	ldr	r3, [pc, #208]	; (8000324 <LCD_GPIO_init+0x150>)
 8000254:	2201      	movs	r2, #1
 8000256:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000258:	4932      	ldr	r1, [pc, #200]	; (8000324 <LCD_GPIO_init+0x150>)
 800025a:	4833      	ldr	r0, [pc, #204]	; (8000328 <LCD_GPIO_init+0x154>)
 800025c:	f000 f9f4 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000260:	4b30      	ldr	r3, [pc, #192]	; (8000324 <LCD_GPIO_init+0x150>)
 8000262:	2204      	movs	r2, #4
 8000264:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000266:	4b2f      	ldr	r3, [pc, #188]	; (8000324 <LCD_GPIO_init+0x150>)
 8000268:	2204      	movs	r2, #4
 800026a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800026c:	4b2d      	ldr	r3, [pc, #180]	; (8000324 <LCD_GPIO_init+0x150>)
 800026e:	2201      	movs	r2, #1
 8000270:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000272:	492c      	ldr	r1, [pc, #176]	; (8000324 <LCD_GPIO_init+0x150>)
 8000274:	482c      	ldr	r0, [pc, #176]	; (8000328 <LCD_GPIO_init+0x154>)
 8000276:	f000 f9e7 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <LCD_GPIO_init+0x150>)
 800027c:	2208      	movs	r2, #8
 800027e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000280:	4b28      	ldr	r3, [pc, #160]	; (8000324 <LCD_GPIO_init+0x150>)
 8000282:	2204      	movs	r2, #4
 8000284:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000286:	4b27      	ldr	r3, [pc, #156]	; (8000324 <LCD_GPIO_init+0x150>)
 8000288:	2201      	movs	r2, #1
 800028a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 800028c:	4925      	ldr	r1, [pc, #148]	; (8000324 <LCD_GPIO_init+0x150>)
 800028e:	4826      	ldr	r0, [pc, #152]	; (8000328 <LCD_GPIO_init+0x154>)
 8000290:	f000 f9da 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000294:	4b23      	ldr	r3, [pc, #140]	; (8000324 <LCD_GPIO_init+0x150>)
 8000296:	2210      	movs	r2, #16
 8000298:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800029a:	4b22      	ldr	r3, [pc, #136]	; (8000324 <LCD_GPIO_init+0x150>)
 800029c:	2204      	movs	r2, #4
 800029e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002a0:	4b20      	ldr	r3, [pc, #128]	; (8000324 <LCD_GPIO_init+0x150>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002a6:	491f      	ldr	r1, [pc, #124]	; (8000324 <LCD_GPIO_init+0x150>)
 80002a8:	481f      	ldr	r0, [pc, #124]	; (8000328 <LCD_GPIO_init+0x154>)
 80002aa:	f000 f9cd 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80002ae:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <LCD_GPIO_init+0x150>)
 80002b0:	2220      	movs	r2, #32
 80002b2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <LCD_GPIO_init+0x150>)
 80002b6:	2204      	movs	r2, #4
 80002b8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <LCD_GPIO_init+0x150>)
 80002bc:	2201      	movs	r2, #1
 80002be:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002c0:	4918      	ldr	r1, [pc, #96]	; (8000324 <LCD_GPIO_init+0x150>)
 80002c2:	4819      	ldr	r0, [pc, #100]	; (8000328 <LCD_GPIO_init+0x154>)
 80002c4:	f000 f9c0 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <LCD_GPIO_init+0x150>)
 80002ca:	2240      	movs	r2, #64	; 0x40
 80002cc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <LCD_GPIO_init+0x150>)
 80002d0:	2204      	movs	r2, #4
 80002d2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002d4:	4b13      	ldr	r3, [pc, #76]	; (8000324 <LCD_GPIO_init+0x150>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002da:	4912      	ldr	r1, [pc, #72]	; (8000324 <LCD_GPIO_init+0x150>)
 80002dc:	4812      	ldr	r0, [pc, #72]	; (8000328 <LCD_GPIO_init+0x154>)
 80002de:	f000 f9b3 	bl	8000648 <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80002e2:	4b10      	ldr	r3, [pc, #64]	; (8000324 <LCD_GPIO_init+0x150>)
 80002e4:	2280      	movs	r2, #128	; 0x80
 80002e6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <LCD_GPIO_init+0x150>)
 80002ea:	2204      	movs	r2, #4
 80002ec:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <LCD_GPIO_init+0x150>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002f4:	490b      	ldr	r1, [pc, #44]	; (8000324 <LCD_GPIO_init+0x150>)
 80002f6:	480c      	ldr	r0, [pc, #48]	; (8000328 <LCD_GPIO_init+0x154>)
 80002f8:	f000 f9a6 	bl	8000648 <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000302:	4809      	ldr	r0, [pc, #36]	; (8000328 <LCD_GPIO_init+0x154>)
 8000304:	f000 fa1f 	bl	8000746 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030e:	4806      	ldr	r0, [pc, #24]	; (8000328 <LCD_GPIO_init+0x154>)
 8000310:	f000 fa19 	bl	8000746 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031a:	4803      	ldr	r0, [pc, #12]	; (8000328 <LCD_GPIO_init+0x154>)
 800031c:	f000 fa13 	bl	8000746 <MCAL_GPIO_WritePin>

}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	2000001c 	.word	0x2000001c
 8000328:	40010800 	.word	0x40010800

0800032c <LCD_clear_screen>:

void LCD_clear_screen()
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000330:	2001      	movs	r0, #1
 8000332:	f000 f841 	bl	80003b8 <LCD_WRITE_COMMAND>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}

0800033a <LCD_GOTO_XY>:


void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 800033a:	b580      	push	{r7, lr}
 800033c:	b082      	sub	sp, #8
 800033e:	af00      	add	r7, sp, #0
 8000340:	4603      	mov	r3, r0
 8000342:	460a      	mov	r2, r1
 8000344:	71fb      	strb	r3, [r7, #7]
 8000346:	4613      	mov	r3, r2
 8000348:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d108      	bne.n	8000362 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000350:	79bb      	ldrb	r3, [r7, #6]
 8000352:	2b0f      	cmp	r3, #15
 8000354:	d805      	bhi.n	8000362 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000356:	79bb      	ldrb	r3, [r7, #6]
 8000358:	3b80      	subs	r3, #128	; 0x80
 800035a:	b2db      	uxtb	r3, r3
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f82b 	bl	80003b8 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b02      	cmp	r3, #2
 8000366:	d108      	bne.n	800037a <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 8000368:	79bb      	ldrb	r3, [r7, #6]
 800036a:	2b0f      	cmp	r3, #15
 800036c:	d805      	bhi.n	800037a <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	3b40      	subs	r3, #64	; 0x40
 8000372:	b2db      	uxtb	r3, r3
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f81f 	bl	80003b8 <LCD_WRITE_COMMAND>
		}
	}
}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <LCD_INIT>:

void LCD_INIT() {
 8000382:	b580      	push	{r7, lr}
 8000384:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000386:	2014      	movs	r0, #20
 8000388:	f7ff fef2 	bl	8000170 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 800038c:	f7ff ff22 	bl	80001d4 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000390:	200f      	movs	r0, #15
 8000392:	f7ff feed 	bl	8000170 <delay_ms>

	LCD_clear_screen();
 8000396:	f7ff ffc9 	bl	800032c <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800039a:	2038      	movs	r0, #56	; 0x38
 800039c:	f000 f80c 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80003a0:	2006      	movs	r0, #6
 80003a2:	f000 f809 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80003a6:	2080      	movs	r0, #128	; 0x80
 80003a8:	f000 f806 	bl	80003b8 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80003ac:	200f      	movs	r0, #15
 80003ae:	f000 f803 	bl	80003b8 <LCD_WRITE_COMMAND>
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	480b      	ldr	r0, [pc, #44]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003ca:	f000 f9d3 	bl	8000774 <MCAL_GPIO_WritePort>
//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
//	LCD_CTRL->CRL = command;
//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d4:	4808      	ldr	r0, [pc, #32]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003d6:	f000 f9b6 	bl	8000746 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e0:	4805      	ldr	r0, [pc, #20]	; (80003f8 <LCD_WRITE_COMMAND+0x40>)
 80003e2:	f000 f9b0 	bl	8000746 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f7ff fec2 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 80003ec:	f7ff fedc 	bl	80001a8 <LCD_lcd_kick>

}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40010800 	.word	0x40010800

080003fc <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
//	LCD_check_lcd_isbusy();
//	LCD_CTRL->CRL = character;
//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	b29b      	uxth	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	480b      	ldr	r0, [pc, #44]	; (800043c <LCD_WRITE_CHAR+0x40>)
 800040e:	f000 f9b1 	bl	8000774 <MCAL_GPIO_WritePort>
//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	4808      	ldr	r0, [pc, #32]	; (800043c <LCD_WRITE_CHAR+0x40>)
 800041a:	f000 f994 	bl	8000746 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	4805      	ldr	r0, [pc, #20]	; (800043c <LCD_WRITE_CHAR+0x40>)
 8000426:	f000 f98e 	bl	8000746 <MCAL_GPIO_WritePin>
//	LCD_CTRL &= ~(1 << RW_SWITCH);
//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800042a:	2001      	movs	r0, #1
 800042c:	f7ff fea0 	bl	8000170 <delay_ms>
	LCD_lcd_kick();
 8000430:	f7ff feba 	bl	80001a8 <LCD_lcd_kick>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40010800 	.word	0x40010800

08000440 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 800044c:	e01c      	b.n	8000488 <LCD_WRITE_STRING+0x48>
		count++;
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	3301      	adds	r3, #1
 8000452:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	607a      	str	r2, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ffcd 	bl	80003fc <LCD_WRITE_CHAR>
		if (count == 16) {
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	2b10      	cmp	r3, #16
 8000466:	d104      	bne.n	8000472 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 8000468:	2100      	movs	r1, #0
 800046a:	2002      	movs	r0, #2
 800046c:	f7ff ff65 	bl	800033a <LCD_GOTO_XY>
 8000470:	e00a      	b.n	8000488 <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	2b20      	cmp	r3, #32
 8000476:	d107      	bne.n	8000488 <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 8000478:	f7ff ff58 	bl	800032c <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 800047c:	2100      	movs	r1, #0
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff ff5b 	bl	800033a <LCD_GOTO_XY>
			count = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d1de      	bne.n	800044e <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <EXTI9_Callback>:

unsigned int IRQ_Flag;


void EXTI9_Callback ()
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <EXTI9_Callback+0x14>)
 800049e:	2201      	movs	r2, #1
 80004a0:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is happening _|-");
 80004a2:	4803      	ldr	r0, [pc, #12]	; (80004b0 <EXTI9_Callback+0x18>)
 80004a4:	f7ff ffcc 	bl	8000440 <LCD_WRITE_STRING>
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000020 	.word	0x20000020
 80004b0:	08000d90 	.word	0x08000d90

080004b4 <main>:


int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
	// Enable clock
	RCC_GPIOA_CLK_EN() ;
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <main+0x6c>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a18      	ldr	r2, [pc, #96]	; (8000520 <main+0x6c>)
 80004c0:	f043 0304 	orr.w	r3, r3, #4
 80004c4:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() ;
 80004c6:	4b16      	ldr	r3, [pc, #88]	; (8000520 <main+0x6c>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a15      	ldr	r2, [pc, #84]	; (8000520 <main+0x6c>)
 80004cc:	f043 0308 	orr.w	r3, r3, #8
 80004d0:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN() ;
 80004d2:	4b13      	ldr	r3, [pc, #76]	; (8000520 <main+0x6c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <main+0x6c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]

	LCD_INIT();
 80004de:	f7ff ff50 	bl	8000382 <LCD_INIT>
	LCD_clear_screen();
 80004e2:	f7ff ff23 	bl	800032c <LCD_clear_screen>

	EXTI_PINConfig_t EXTI_CFG ;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 80004e6:	4a0f      	ldr	r2, [pc, #60]	; (8000524 <main+0x70>)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 80004f0:	2300      	movs	r3, #0
 80004f2:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.p_IRQ_CallBack = EXTI9_Callback ;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <main+0x74>)
 80004f6:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_Enable;
 80004f8:	2301      	movs	r3, #1
 80004fa:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fafa 	bl	8000af8 <MCAL_EXTI_GPIO_Init>
	IRQ_Flag =1;
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <main+0x78>)
 8000506:	2201      	movs	r2, #1
 8000508:	601a      	str	r2, [r3, #0]

	while (1)
	{
		if (IRQ_Flag)
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <main+0x78>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0fb      	beq.n	800050a <main+0x56>
		{
			LCD_clear_screen();
 8000512:	f7ff ff0b 	bl	800032c <LCD_clear_screen>
			IRQ_Flag =0;
 8000516:	4b05      	ldr	r3, [pc, #20]	; (800052c <main+0x78>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
		if (IRQ_Flag)
 800051c:	e7f5      	b.n	800050a <main+0x56>
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	08000dac 	.word	0x08000dac
 8000528:	08000499 	.word	0x08000499
 800052c:	20000020 	.word	0x20000020

08000530 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000530:	480d      	ldr	r0, [pc, #52]	; (8000568 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000532:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000534:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <LoopForever+0x6>)
  ldr r1, =_edata
 800053a:	490d      	ldr	r1, [pc, #52]	; (8000570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <LoopForever+0xe>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000550:	4c0a      	ldr	r4, [pc, #40]	; (800057c <LoopForever+0x16>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800055e:	f000 fbe7 	bl	8000d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff ffa7 	bl	80004b4 <main>

08000566 <LoopForever>:

LoopForever:
    b LoopForever
 8000566:	e7fe      	b.n	8000566 <LoopForever>
  ldr   r0, =_estack
 8000568:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800056c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000570:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000574:	08000dc0 	.word	0x08000dc0
  ldr r2, =_sbss
 8000578:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800057c:	20000060 	.word	0x20000060

08000580 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000580:	e7fe      	b.n	8000580 <ADC1_2_IRQHandler>

08000582 <Get_CRLH_Position>:


#include "Stm32_F103C6_GPIO_driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000582:	b480      	push	{r7}
 8000584:	b083      	sub	sp, #12
 8000586:	af00      	add	r7, sp, #0
 8000588:	4603      	mov	r3, r0
 800058a:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	2b80      	cmp	r3, #128	; 0x80
 8000590:	d042      	beq.n	8000618 <Get_CRLH_Position+0x96>
 8000592:	2b80      	cmp	r3, #128	; 0x80
 8000594:	dc11      	bgt.n	80005ba <Get_CRLH_Position+0x38>
 8000596:	2b08      	cmp	r3, #8
 8000598:	d036      	beq.n	8000608 <Get_CRLH_Position+0x86>
 800059a:	2b08      	cmp	r3, #8
 800059c:	dc06      	bgt.n	80005ac <Get_CRLH_Position+0x2a>
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d02e      	beq.n	8000600 <Get_CRLH_Position+0x7e>
 80005a2:	2b04      	cmp	r3, #4
 80005a4:	d02e      	beq.n	8000604 <Get_CRLH_Position+0x82>
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d028      	beq.n	80005fc <Get_CRLH_Position+0x7a>
 80005aa:	e047      	b.n	800063c <Get_CRLH_Position+0xba>
 80005ac:	2b20      	cmp	r3, #32
 80005ae:	d02f      	beq.n	8000610 <Get_CRLH_Position+0x8e>
 80005b0:	2b40      	cmp	r3, #64	; 0x40
 80005b2:	d02f      	beq.n	8000614 <Get_CRLH_Position+0x92>
 80005b4:	2b10      	cmp	r3, #16
 80005b6:	d029      	beq.n	800060c <Get_CRLH_Position+0x8a>
 80005b8:	e040      	b.n	800063c <Get_CRLH_Position+0xba>
 80005ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005be:	d033      	beq.n	8000628 <Get_CRLH_Position+0xa6>
 80005c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005c4:	dc09      	bgt.n	80005da <Get_CRLH_Position+0x58>
 80005c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005ca:	d029      	beq.n	8000620 <Get_CRLH_Position+0x9e>
 80005cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d0:	d028      	beq.n	8000624 <Get_CRLH_Position+0xa2>
 80005d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005d6:	d021      	beq.n	800061c <Get_CRLH_Position+0x9a>
 80005d8:	e030      	b.n	800063c <Get_CRLH_Position+0xba>
 80005da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005de:	d027      	beq.n	8000630 <Get_CRLH_Position+0xae>
 80005e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e4:	dc03      	bgt.n	80005ee <Get_CRLH_Position+0x6c>
 80005e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005ea:	d01f      	beq.n	800062c <Get_CRLH_Position+0xaa>
 80005ec:	e026      	b.n	800063c <Get_CRLH_Position+0xba>
 80005ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005f2:	d01f      	beq.n	8000634 <Get_CRLH_Position+0xb2>
 80005f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005f8:	d01e      	beq.n	8000638 <Get_CRLH_Position+0xb6>
 80005fa:	e01f      	b.n	800063c <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	e01e      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000600:	2304      	movs	r3, #4
 8000602:	e01c      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000604:	2308      	movs	r3, #8
 8000606:	e01a      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000608:	230c      	movs	r3, #12
 800060a:	e018      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 800060c:	2310      	movs	r3, #16
 800060e:	e016      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000610:	2314      	movs	r3, #20
 8000612:	e014      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000614:	2318      	movs	r3, #24
 8000616:	e012      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000618:	231c      	movs	r3, #28
 800061a:	e010      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 800061c:	2300      	movs	r3, #0
 800061e:	e00e      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000620:	2304      	movs	r3, #4
 8000622:	e00c      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000624:	2308      	movs	r3, #8
 8000626:	e00a      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000628:	230c      	movs	r3, #12
 800062a:	e008      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 800062c:	2310      	movs	r3, #16
 800062e:	e006      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000630:	2314      	movs	r3, #20
 8000632:	e004      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000634:	2318      	movs	r3, #24
 8000636:	e002      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000638:	231c      	movs	r3, #28
 800063a:	e000      	b.n	800063e <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <MCAL_GPIO_Init>:
 * @retval 			- none
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					  		But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINs from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t* PinConfig)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	// Port config reg Low (GPIOx_CRL) config PINs from 0 >>> 7
	// port config reg High (GPIOx_CRH) config PINs from 8 >>> 15
	volatile uint32_t* configregister = NULL;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	73fb      	strb	r3, [r7, #15]
	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	2bff      	cmp	r3, #255	; 0xff
 8000660:	d801      	bhi.n	8000666 <MCAL_GPIO_Init+0x1e>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	e001      	b.n	800066a <MCAL_GPIO_Init+0x22>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3304      	adds	r3, #4
 800066a:	60bb      	str	r3, [r7, #8]
	// clear CNF8[1:0]	MODE8[1:0]
	(*configregister) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ff86 	bl	8000582 <Get_CRLH_Position>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	230f      	movs	r3, #15
 800067c:	4093      	lsls	r3, r2
 800067e:	43da      	mvns	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	401a      	ands	r2, r3
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	601a      	str	r2, [r3, #0]

	// if pin is output
	if ( (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD) || (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	789b      	ldrb	r3, [r3, #2]
 800068e:	2b07      	cmp	r3, #7
 8000690:	d00b      	beq.n	80006aa <MCAL_GPIO_Init+0x62>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	789b      	ldrb	r3, [r3, #2]
 8000696:	2b06      	cmp	r3, #6
 8000698:	d007      	beq.n	80006aa <MCAL_GPIO_Init+0x62>
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	789b      	ldrb	r3, [r3, #2]
 800069e:	2b05      	cmp	r3, #5
 80006a0:	d003      	beq.n	80006aa <MCAL_GPIO_Init+0x62>
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	789b      	ldrb	r3, [r3, #2]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d10e      	bne.n	80006c8 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] MODE8[1:0]
		PIN_Config = ((((PinConfig->GPIO_MODE -4) << 2) | (PinConfig->GPIO_Output_Speed)) & 0x0f);
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	789b      	ldrb	r3, [r3, #2]
 80006ae:	3b04      	subs	r3, #4
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	b25a      	sxtb	r2, r3
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	78db      	ldrb	r3, [r3, #3]
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e02c      	b.n	8000722 <MCAL_GPIO_Init+0xda>
	}

	// if pin is input MODE = 00: Input mode (reset state)
	else
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d003      	beq.n	80006d8 <MCAL_GPIO_Init+0x90>
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	789b      	ldrb	r3, [r3, #2]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d107      	bne.n	80006e8 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF8[1:0]  MODE8[1:0] 00
			PIN_Config = ((((PinConfig->GPIO_MODE) << 2)| 0x0 ) & 0x0f);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	789b      	ldrb	r3, [r3, #2]
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	73fb      	strb	r3, [r7, #15]
 80006e6:	e01c      	b.n	8000722 <MCAL_GPIO_Init+0xda>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Consider it as input floating
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	789b      	ldrb	r3, [r3, #2]
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d102      	bne.n	80006f6 <MCAL_GPIO_Init+0xae>
		{
			// Set CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_FLO) << 2) | 0x0 ) & 0x0f);
 80006f0:	2304      	movs	r3, #4
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	e015      	b.n	8000722 <MCAL_GPIO_Init+0xda>
		}
		else // PU PD Input
		{
			PIN_Config = ((((GPIO_MODE_INPUT_PU) << 2) | 0x0) & 0x0f);
 80006f6:	2308      	movs	r3, #8
 80006f8:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d107      	bne.n	8000712 <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1 Input pull-up :Table 20 Port bit configuration table
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber) ;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	8812      	ldrh	r2, [r2, #0]
 800070a:	431a      	orrs	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	e007      	b.n	8000722 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0 Input pull-down :Table 20 Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	8812      	ldrh	r2, [r2, #0]
 800071a:	43d2      	mvns	r2, r2
 800071c:	401a      	ands	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on CRL or CRH
	(*configregister) |= ((PIN_Config) << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000722:	7bfc      	ldrb	r4, [r7, #15]
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff2a 	bl	8000582 <Get_CRLH_Position>
 800072e:	4603      	mov	r3, r0
 8000730:	fa04 f203 	lsl.w	r2, r4, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	431a      	orrs	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	601a      	str	r2, [r3, #0]

}
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bd90      	pop	{r4, r7, pc}

08000746 <MCAL_GPIO_WritePin>:
 * @param [in] 		- Value: Pin Value
 * @retval			- none
 * Note				- none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	460b      	mov	r3, r1
 8000750:	807b      	strh	r3, [r7, #2]
 8000752:	4613      	mov	r3, r2
 8000754:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 8000756:	787b      	ldrb	r3, [r7, #1]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d003      	beq.n	8000764 <MCAL_GPIO_WritePin+0x1e>
	{
		//	GPIOx->ODR |= GPIO_PIN_SET;
		GPIOx->BSRR = (uint32_t)PinNumber;
 800075c:	887a      	ldrh	r2, [r7, #2]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000762:	e002      	b.n	800076a <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000764:	887a      	ldrh	r2, [r7, #2]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	615a      	str	r2, [r3, #20]
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <MCAL_GPIO_WritePort>:
 * @param [in] 		- PinNumber: specifies the port bin to read set by @ref GPIO_PINS_define
 * @retval			- none
 * Note				- none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000780:	887a      	ldrh	r2, [r7, #2]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	60da      	str	r2, [r3, #12]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <Enable_NVIC>:
// ===============================================================
//                   Generic Functions
// ===============================================================

void Enable_NVIC (uint16_t IRQ)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d854      	bhi.n	800084a <Enable_NVIC+0xba>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <Enable_NVIC+0x18>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007e9 	.word	0x080007e9
 80007ac:	080007f7 	.word	0x080007f7
 80007b0:	08000805 	.word	0x08000805
 80007b4:	08000813 	.word	0x08000813
 80007b8:	08000821 	.word	0x08000821
 80007bc:	0800082f 	.word	0x0800082f
 80007c0:	0800082f 	.word	0x0800082f
 80007c4:	0800082f 	.word	0x0800082f
 80007c8:	0800082f 	.word	0x0800082f
 80007cc:	0800082f 	.word	0x0800082f
 80007d0:	0800083d 	.word	0x0800083d
 80007d4:	0800083d 	.word	0x0800083d
 80007d8:	0800083d 	.word	0x0800083d
 80007dc:	0800083d 	.word	0x0800083d
 80007e0:	0800083d 	.word	0x0800083d
 80007e4:	0800083d 	.word	0x0800083d
	{
	case 0:
			NVIC_IRQ6_EXTI0_Enable;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <Enable_NVIC+0xc4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <Enable_NVIC+0xc4>)
 80007ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f2:	6013      	str	r3, [r2, #0]
			break;
 80007f4:	e029      	b.n	800084a <Enable_NVIC+0xba>
	case 1:
			NVIC_IRQ7_EXTI1_Enable;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <Enable_NVIC+0xc4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a16      	ldr	r2, [pc, #88]	; (8000854 <Enable_NVIC+0xc4>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6013      	str	r3, [r2, #0]
			break;
 8000802:	e022      	b.n	800084a <Enable_NVIC+0xba>
	case 2:
			NVIC_IRQ8_EXTI2_Enable;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <Enable_NVIC+0xc4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <Enable_NVIC+0xc4>)
 800080a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080e:	6013      	str	r3, [r2, #0]
			break;
 8000810:	e01b      	b.n	800084a <Enable_NVIC+0xba>
	case 3:
			NVIC_IRQ9_EXTI3_Enable;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <Enable_NVIC+0xc4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <Enable_NVIC+0xc4>)
 8000818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081c:	6013      	str	r3, [r2, #0]
			break;
 800081e:	e014      	b.n	800084a <Enable_NVIC+0xba>
	case 4:
			NVIC_IRQ10_EXTI4_Enable;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <Enable_NVIC+0xc4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <Enable_NVIC+0xc4>)
 8000826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800082a:	6013      	str	r3, [r2, #0]
			break;
 800082c:	e00d      	b.n	800084a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <Enable_NVIC+0xc4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <Enable_NVIC+0xc4>)
 8000834:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000838:	6013      	str	r3, [r2, #0]
		break;
 800083a:	e006      	b.n	800084a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ23_EXTI10_15_Enable;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <Enable_NVIC+0xc4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <Enable_NVIC+0xc4>)
 8000842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000846:	6013      	str	r3, [r2, #0]
		break;
 8000848:	bf00      	nop
	}
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	e000e100 	.word	0xe000e100

08000858 <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d854      	bhi.n	8000912 <Disable_NVIC+0xba>
 8000868:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <Disable_NVIC+0x18>)
 800086a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086e:	bf00      	nop
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008bf 	.word	0x080008bf
 8000878:	080008cd 	.word	0x080008cd
 800087c:	080008db 	.word	0x080008db
 8000880:	080008e9 	.word	0x080008e9
 8000884:	080008f7 	.word	0x080008f7
 8000888:	080008f7 	.word	0x080008f7
 800088c:	080008f7 	.word	0x080008f7
 8000890:	080008f7 	.word	0x080008f7
 8000894:	080008f7 	.word	0x080008f7
 8000898:	08000905 	.word	0x08000905
 800089c:	08000905 	.word	0x08000905
 80008a0:	08000905 	.word	0x08000905
 80008a4:	08000905 	.word	0x08000905
 80008a8:	08000905 	.word	0x08000905
 80008ac:	08000905 	.word	0x08000905
	{
	case 0:
			NVIC_IRQ6_EXTI0_Disable;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <Disable_NVIC+0xc4>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a19      	ldr	r2, [pc, #100]	; (800091c <Disable_NVIC+0xc4>)
 80008b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ba:	6013      	str	r3, [r2, #0]
			break;
 80008bc:	e029      	b.n	8000912 <Disable_NVIC+0xba>
	case 1:
			NVIC_IRQ7_EXTI1_Disable;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <Disable_NVIC+0xc4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <Disable_NVIC+0xc4>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	6013      	str	r3, [r2, #0]
			break;
 80008ca:	e022      	b.n	8000912 <Disable_NVIC+0xba>
	case 2:
			NVIC_IRQ8_EXTI2_Disable;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <Disable_NVIC+0xc4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a12      	ldr	r2, [pc, #72]	; (800091c <Disable_NVIC+0xc4>)
 80008d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d6:	6013      	str	r3, [r2, #0]
			break;
 80008d8:	e01b      	b.n	8000912 <Disable_NVIC+0xba>
	case 3:
			NVIC_IRQ9_EXTI3_Disable;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <Disable_NVIC+0xc4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <Disable_NVIC+0xc4>)
 80008e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e4:	6013      	str	r3, [r2, #0]
			break;
 80008e6:	e014      	b.n	8000912 <Disable_NVIC+0xba>
	case 4:
			NVIC_IRQ10_EXTI4_Disable;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <Disable_NVIC+0xc4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <Disable_NVIC+0xc4>)
 80008ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f2:	6013      	str	r3, [r2, #0]
			break;
 80008f4:	e00d      	b.n	8000912 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <Disable_NVIC+0xc4>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <Disable_NVIC+0xc4>)
 80008fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000900:	6013      	str	r3, [r2, #0]
		break;
 8000902:	e006      	b.n	8000912 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ23_EXTI10_15_Disable;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <Disable_NVIC+0xc4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <Disable_NVIC+0xc4>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800090e:	6013      	str	r3, [r2, #0]
		break;
 8000910:	bf00      	nop
	}
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	e000e180 	.word	0xe000e180

08000920 <Update_EXTI>:

void Update_EXTI(EXTI_PINConfig_t* EXTI_Config)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	//1. Configure GPIO to be AF Input -> Floating INPUT
	GPIO_PinConfig_t pinCfg ;

	// Update the GPIO Pin to be Floating Input
	pinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	891b      	ldrh	r3, [r3, #8]
 800092c:	813b      	strh	r3, [r7, #8]
	pinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO ;
 800092e:	2301      	movs	r3, #1
 8000930:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &pinCfg);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f107 0208 	add.w	r2, r7, #8
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fe83 	bl	8000648 <MCAL_GPIO_Init>

	//2. Update AFIO to Route between EXTI Line with Port A,B,C,D
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	b29b      	uxth	r3, r3
 800094a:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Postion = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4)* 4;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	73bb      	strb	r3, [r7, #14]

	// clear the four bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~ (0xF << AFIO_EXTICR_Postion);
 800095c:	4a5f      	ldr	r2, [pc, #380]	; (8000adc <Update_EXTI+0x1bc>)
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	3302      	adds	r3, #2
 8000962:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000966:	7bbb      	ldrb	r3, [r7, #14]
 8000968:	210f      	movs	r1, #15
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	4618      	mov	r0, r3
 8000972:	495a      	ldr	r1, [pc, #360]	; (8000adc <Update_EXTI+0x1bc>)
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	4002      	ands	r2, r0
 8000978:	3302      	adds	r3, #2
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |=  ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_Postion);
 800097e:	4a57      	ldr	r2, [pc, #348]	; (8000adc <Update_EXTI+0x1bc>)
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	3302      	adds	r3, #2
 8000984:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4954      	ldr	r1, [pc, #336]	; (8000ae0 <Update_EXTI+0x1c0>)
 800098e:	428b      	cmp	r3, r1
 8000990:	d016      	beq.n	80009c0 <Update_EXTI+0xa0>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4953      	ldr	r1, [pc, #332]	; (8000ae4 <Update_EXTI+0x1c4>)
 8000998:	428b      	cmp	r3, r1
 800099a:	d00f      	beq.n	80009bc <Update_EXTI+0x9c>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4951      	ldr	r1, [pc, #324]	; (8000ae8 <Update_EXTI+0x1c8>)
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d008      	beq.n	80009b8 <Update_EXTI+0x98>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	4950      	ldr	r1, [pc, #320]	; (8000aec <Update_EXTI+0x1cc>)
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d101      	bne.n	80009b4 <Update_EXTI+0x94>
 80009b0:	2303      	movs	r3, #3
 80009b2:	e006      	b.n	80009c2 <Update_EXTI+0xa2>
 80009b4:	2300      	movs	r3, #0
 80009b6:	e004      	b.n	80009c2 <Update_EXTI+0xa2>
 80009b8:	2302      	movs	r3, #2
 80009ba:	e002      	b.n	80009c2 <Update_EXTI+0xa2>
 80009bc:	2301      	movs	r3, #1
 80009be:	e000      	b.n	80009c2 <Update_EXTI+0xa2>
 80009c0:	2300      	movs	r3, #0
 80009c2:	7bb9      	ldrb	r1, [r7, #14]
 80009c4:	408b      	lsls	r3, r1
 80009c6:	4618      	mov	r0, r3
 80009c8:	4944      	ldr	r1, [pc, #272]	; (8000adc <Update_EXTI+0x1bc>)
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	4302      	orrs	r2, r0
 80009ce:	3302      	adds	r3, #2
 80009d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3. Update Rising or falling Register
	EXTI->RTSR &= ~ (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80009d4:	4b46      	ldr	r3, [pc, #280]	; (8000af0 <Update_EXTI+0x1d0>)
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	8812      	ldrh	r2, [r2, #0]
 80009dc:	4611      	mov	r1, r2
 80009de:	2201      	movs	r2, #1
 80009e0:	408a      	lsls	r2, r1
 80009e2:	43d2      	mvns	r2, r2
 80009e4:	4611      	mov	r1, r2
 80009e6:	4a42      	ldr	r2, [pc, #264]	; (8000af0 <Update_EXTI+0x1d0>)
 80009e8:	400b      	ands	r3, r1
 80009ea:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~ (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80009ec:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <Update_EXTI+0x1d0>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	8812      	ldrh	r2, [r2, #0]
 80009f4:	4611      	mov	r1, r2
 80009f6:	2201      	movs	r2, #1
 80009f8:	408a      	lsls	r2, r1
 80009fa:	43d2      	mvns	r2, r2
 80009fc:	4611      	mov	r1, r2
 80009fe:	4a3c      	ldr	r2, [pc, #240]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a00:	400b      	ands	r3, r1
 8000a02:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7b1b      	ldrb	r3, [r3, #12]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10b      	bne.n	8000a24 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	8812      	ldrh	r2, [r2, #0]
 8000a14:	4611      	mov	r1, r2
 8000a16:	2201      	movs	r2, #1
 8000a18:	408a      	lsls	r2, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4a34      	ldr	r2, [pc, #208]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a1e:	430b      	orrs	r3, r1
 8000a20:	6093      	str	r3, [r2, #8]
 8000a22:	e029      	b.n	8000a78 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7b1b      	ldrb	r3, [r3, #12]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d10b      	bne.n	8000a44 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a2c:	4b30      	ldr	r3, [pc, #192]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	8812      	ldrh	r2, [r2, #0]
 8000a34:	4611      	mov	r1, r2
 8000a36:	2201      	movs	r2, #1
 8000a38:	408a      	lsls	r2, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4a2c      	ldr	r2, [pc, #176]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	60d3      	str	r3, [r2, #12]
 8000a42:	e019      	b.n	8000a78 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7b1b      	ldrb	r3, [r3, #12]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d115      	bne.n	8000a78 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	8812      	ldrh	r2, [r2, #0]
 8000a54:	4611      	mov	r1, r2
 8000a56:	2201      	movs	r2, #1
 8000a58:	408a      	lsls	r2, r1
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4a24      	ldr	r2, [pc, #144]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a5e:	430b      	orrs	r3, r1
 8000a60:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	8812      	ldrh	r2, [r2, #0]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	408a      	lsls	r2, r1
 8000a70:	4611      	mov	r1, r2
 8000a72:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a74:	430b      	orrs	r3, r1
 8000a76:	60d3      	str	r3, [r2, #12]
	}

	//4. Update IRQ Handling CALLBACK
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->p_IRQ_CallBack ;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	4a1c      	ldr	r2, [pc, #112]	; (8000af4 <Update_EXTI+0x1d4>)
 8000a84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//5. Enable/ Disable IRQ & NVIC
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_Enable)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	7b5b      	ldrb	r3, [r3, #13]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d110      	bne.n	8000ab2 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <Update_EXTI+0x1d0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	8812      	ldrh	r2, [r2, #0]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	408a      	lsls	r2, r1
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <Update_EXTI+0x1d0>)
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	6013      	str	r3, [r2, #0]
		Enable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fe70 	bl	8000790 <Enable_NVIC>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);

	}

}
 8000ab0:	e010      	b.n	8000ad4 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<< EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <Update_EXTI+0x1d0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	8812      	ldrh	r2, [r2, #0]
 8000aba:	4611      	mov	r1, r2
 8000abc:	2201      	movs	r2, #1
 8000abe:	408a      	lsls	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <Update_EXTI+0x1d0>)
 8000ac6:	400b      	ands	r3, r1
 8000ac8:	6013      	str	r3, [r2, #0]
		Disable_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fec2 	bl	8000858 <Disable_NVIC>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010000 	.word	0x40010000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	40011400 	.word	0x40011400
 8000af0:	40010400 	.word	0x40010400
 8000af4:	20000024 	.word	0x20000024

08000af8 <MCAL_EXTI_GPIO_Init>:
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 					  But LQFP48 Package has only GPIO A,B, part of C/D exported as external pins from the MCU
 * 					  Also Mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PINConfig_t* EXTI_Config)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff0d 	bl	8000920 <Update_EXTI>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <EXTI0_IRQHandler>:
{
	Update_EXTI(EXTI_Config);
}

void EXTI0_IRQHandler (void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	// Clear Pending register by set it (EXTI_PR)
	EXTI->PR |= (1<<0);
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <EXTI0_IRQHandler+0x1c>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <EXTI0_IRQHandler+0x1c>)
 8000b1a:	f043 0301 	orr.w	r3, r3, #1
 8000b1e:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[0]() ;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <EXTI0_IRQHandler+0x20>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4798      	blx	r3
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010400 	.word	0x40010400
 8000b30:	20000024 	.word	0x20000024

08000b34 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
	// Clear Pending register by set it (EXTI_PR)
	EXTI->PR |= (1<<1);
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <EXTI1_IRQHandler+0x1c>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <EXTI1_IRQHandler+0x1c>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[1]() ;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <EXTI1_IRQHandler+0x20>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4798      	blx	r3
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40010400 	.word	0x40010400
 8000b54:	20000024 	.word	0x20000024

08000b58 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	// Clear Pending register by set it (EXTI_PR)
	EXTI->PR |= (1<<2);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <EXTI2_IRQHandler+0x1c>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <EXTI2_IRQHandler+0x1c>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[2]() ;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <EXTI2_IRQHandler+0x20>)
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	4798      	blx	r3
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40010400 	.word	0x40010400
 8000b78:	20000024 	.word	0x20000024

08000b7c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	// Clear Pending register by set it (EXTI_PR)
	EXTI->PR |= (1<<3);
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <EXTI3_IRQHandler+0x1c>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <EXTI3_IRQHandler+0x1c>)
 8000b86:	f043 0308 	orr.w	r3, r3, #8
 8000b8a:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[3]() ;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <EXTI3_IRQHandler+0x20>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	4798      	blx	r3
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010400 	.word	0x40010400
 8000b9c:	20000024 	.word	0x20000024

08000ba0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	// Clear Pending register by set it (EXTI_PR)
	EXTI->PR |= (1<<4);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <EXTI4_IRQHandler+0x1c>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <EXTI4_IRQHandler+0x1c>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6153      	str	r3, [r2, #20]
	//CALL IRQ_CALL
	GP_IRQ_CallBack[4]() ;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <EXTI4_IRQHandler+0x20>)
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	4798      	blx	r3
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40010400 	.word	0x40010400
 8000bc0:	20000024 	.word	0x20000024

08000bc4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler (void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<5)) { EXTI->PR |= (1<<5) ;	GP_IRQ_CallBack[5]() ;	}
 8000bc8:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f003 0320 	and.w	r3, r3, #32
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d008      	beq.n	8000be6 <EXTI9_5_IRQHandler+0x22>
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	4a22      	ldr	r2, [pc, #136]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000bda:	f043 0320 	orr.w	r3, r3, #32
 8000bde:	6153      	str	r3, [r2, #20]
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <EXTI9_5_IRQHandler+0xa4>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4798      	blx	r3
	if (EXTI->PR & (1<<6)) { EXTI->PR |= (1<<6) ;	GP_IRQ_CallBack[6]() ;	}
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d008      	beq.n	8000c04 <EXTI9_5_IRQHandler+0x40>
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <EXTI9_5_IRQHandler+0xa4>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4798      	blx	r3
	if (EXTI->PR & (1<<7)) { EXTI->PR |= (1<<7) ;	GP_IRQ_CallBack[7]() ;	}
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d008      	beq.n	8000c22 <EXTI9_5_IRQHandler+0x5e>
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1a:	6153      	str	r3, [r2, #20]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <EXTI9_5_IRQHandler+0xa4>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	4798      	blx	r3
	if (EXTI->PR & (1<<8)) { EXTI->PR |= (1<<8) ;	GP_IRQ_CallBack[8]() ;	}
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d008      	beq.n	8000c40 <EXTI9_5_IRQHandler+0x7c>
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <EXTI9_5_IRQHandler+0xa4>)
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	4798      	blx	r3
	if (EXTI->PR & (1<<9)) { EXTI->PR |= (1<<9) ;	GP_IRQ_CallBack[9]() ;	}
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <EXTI9_5_IRQHandler+0x9a>
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <EXTI9_5_IRQHandler+0xa0>)
 8000c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c56:	6153      	str	r3, [r2, #20]
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <EXTI9_5_IRQHandler+0xa4>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	4798      	blx	r3
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40010400 	.word	0x40010400
 8000c68:	20000024 	.word	0x20000024

08000c6c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler (void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1<<10)) { EXTI->PR |= (1<<10) ;	GP_IRQ_CallBack[10]() ;	}
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d008      	beq.n	8000c8e <EXTI15_10_IRQHandler+0x22>
 8000c7c:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	6153      	str	r3, [r2, #20]
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <EXTI15_10_IRQHandler+0xc0>)
 8000c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8c:	4798      	blx	r3
	if (EXTI->PR & (1<<11)) { EXTI->PR |= (1<<11) ;	GP_IRQ_CallBack[11]() ;	}
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d008      	beq.n	8000cac <EXTI15_10_IRQHandler+0x40>
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca4:	6153      	str	r3, [r2, #20]
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <EXTI15_10_IRQHandler+0xc0>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000caa:	4798      	blx	r3
	if (EXTI->PR & (1<<12)) { EXTI->PR |= (1<<12) ;	GP_IRQ_CallBack[12]() ;	}
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d008      	beq.n	8000cca <EXTI15_10_IRQHandler+0x5e>
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	4a1a      	ldr	r2, [pc, #104]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000cbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cc2:	6153      	str	r3, [r2, #20]
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <EXTI15_10_IRQHandler+0xc0>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	4798      	blx	r3
	if (EXTI->PR & (1<<13)) { EXTI->PR |= (1<<13) ;	GP_IRQ_CallBack[13]() ;	}
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d008      	beq.n	8000ce8 <EXTI15_10_IRQHandler+0x7c>
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <EXTI15_10_IRQHandler+0xc0>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	4798      	blx	r3
	if (EXTI->PR & (1<<14)) { EXTI->PR |= (1<<14) ;	GP_IRQ_CallBack[14]() ;	}
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <EXTI15_10_IRQHandler+0x9a>
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfe:	6153      	str	r3, [r2, #20]
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <EXTI15_10_IRQHandler+0xc0>)
 8000d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d04:	4798      	blx	r3
	if (EXTI->PR & (1<<15)) { EXTI->PR |= (1<<15) ;	GP_IRQ_CallBack[15]() ;	}
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <EXTI15_10_IRQHandler+0xb8>
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <EXTI15_10_IRQHandler+0xbc>)
 8000d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <EXTI15_10_IRQHandler+0xc0>)
 8000d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d22:	4798      	blx	r3
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40010400 	.word	0x40010400
 8000d2c:	20000024 	.word	0x20000024

08000d30 <__libc_init_array>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	2500      	movs	r5, #0
 8000d34:	4e0c      	ldr	r6, [pc, #48]	; (8000d68 <__libc_init_array+0x38>)
 8000d36:	4c0d      	ldr	r4, [pc, #52]	; (8000d6c <__libc_init_array+0x3c>)
 8000d38:	1ba4      	subs	r4, r4, r6
 8000d3a:	10a4      	asrs	r4, r4, #2
 8000d3c:	42a5      	cmp	r5, r4
 8000d3e:	d109      	bne.n	8000d54 <__libc_init_array+0x24>
 8000d40:	f000 f81a 	bl	8000d78 <_init>
 8000d44:	2500      	movs	r5, #0
 8000d46:	4e0a      	ldr	r6, [pc, #40]	; (8000d70 <__libc_init_array+0x40>)
 8000d48:	4c0a      	ldr	r4, [pc, #40]	; (8000d74 <__libc_init_array+0x44>)
 8000d4a:	1ba4      	subs	r4, r4, r6
 8000d4c:	10a4      	asrs	r4, r4, #2
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d105      	bne.n	8000d5e <__libc_init_array+0x2e>
 8000d52:	bd70      	pop	{r4, r5, r6, pc}
 8000d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d58:	4798      	blx	r3
 8000d5a:	3501      	adds	r5, #1
 8000d5c:	e7ee      	b.n	8000d3c <__libc_init_array+0xc>
 8000d5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d62:	4798      	blx	r3
 8000d64:	3501      	adds	r5, #1
 8000d66:	e7f2      	b.n	8000d4e <__libc_init_array+0x1e>
 8000d68:	08000db8 	.word	0x08000db8
 8000d6c:	08000db8 	.word	0x08000db8
 8000d70:	08000db8 	.word	0x08000db8
 8000d74:	08000dbc 	.word	0x08000dbc

08000d78 <_init>:
 8000d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7a:	bf00      	nop
 8000d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d7e:	bc08      	pop	{r3}
 8000d80:	469e      	mov	lr, r3
 8000d82:	4770      	bx	lr

08000d84 <_fini>:
 8000d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d86:	bf00      	nop
 8000d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8a:	bc08      	pop	{r3}
 8000d8c:	469e      	mov	lr, r3
 8000d8e:	4770      	bx	lr
